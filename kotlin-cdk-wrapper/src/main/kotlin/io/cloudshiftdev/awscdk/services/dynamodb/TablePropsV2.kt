@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.dynamodb

import io.cloudshiftdev.awscdk.CfnTag
import io.cloudshiftdev.awscdk.RemovalPolicy
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import io.cloudshiftdev.awscdk.services.iam.PolicyDocument
import io.cloudshiftdev.awscdk.services.kinesis.IStream
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmName

/**
 * Properties used to configure a DynamoDB table.
 *
 * Example:
 *
 * ```
 * import io.cloudshiftdev.awscdk.*;
 * App app = new App();
 * Stack stack = Stack.Builder.create(app,
 * "Stack").env(Environment.builder().region("us-west-2").build()).build();
 * TableV2 globalTable = TableV2.Builder.create(stack, "GlobalTable")
 * .partitionKey(Attribute.builder().name("pk").type(AttributeType.STRING).build())
 * // applies to all replicas, i.e., us-west-2, us-east-1, us-east-2
 * .removalPolicy(RemovalPolicy.DESTROY)
 * .replicas(List.of(ReplicaTableProps.builder().region("us-east-1").build(),
 * ReplicaTableProps.builder().region("us-east-2").build()))
 * .build();
 * ```
 */
public interface TablePropsV2 : TableOptionsV2 {
  /**
   * The billing mode and capacity settings to apply to the table.
   *
   * Default: Billing.onDemand()
   */
  public fun billing(): Billing? = unwrap(this).getBilling()?.let(Billing::wrap)

  /**
   * When an item in the table is modified, StreamViewType determines what information is written to
   * the stream.
   *
   * Default: - streams are disabled if replicas are not configured and this property is
   * not specified. If this property is not specified when replicas are configured, then
   * NEW_AND_OLD_IMAGES will be the StreamViewType for all replicas
   */
  public fun dynamoStream(): StreamViewType? =
      unwrap(this).getDynamoStream()?.let(StreamViewType::wrap)

  /**
   * The server-side encryption.
   *
   * Default: TableEncryptionV2.dynamoOwnedKey()
   */
  public fun encryption(): TableEncryptionV2? =
      unwrap(this).getEncryption()?.let(TableEncryptionV2::wrap)

  /**
   * Global secondary indexes.
   *
   * Note: You can provide a maximum of 20 global secondary indexes.
   *
   * Default: - no global secondary indexes
   */
  public fun globalSecondaryIndexes(): List<GlobalSecondaryIndexPropsV2> =
      unwrap(this).getGlobalSecondaryIndexes()?.map(GlobalSecondaryIndexPropsV2::wrap) ?:
      emptyList()

  /**
   * Local secondary indexes.
   *
   * Note: You can only provide a maximum of 5 local secondary indexes.
   *
   * Default: - no local secondary indexes
   */
  public fun localSecondaryIndexes(): List<LocalSecondaryIndexProps> =
      unwrap(this).getLocalSecondaryIndexes()?.map(LocalSecondaryIndexProps::wrap) ?: emptyList()

  /**
   * Partition key attribute definition.
   */
  public fun partitionKey(): Attribute

  /**
   * The removal policy applied to the table.
   *
   * Default: RemovalPolicy.RETAIN
   */
  public fun removalPolicy(): RemovalPolicy? =
      unwrap(this).getRemovalPolicy()?.let(RemovalPolicy::wrap)

  /**
   * Replica tables to deploy with the primary table.
   *
   * Note: Adding replica tables allows you to use your table as a global table. You
   * cannot specify a replica table in the region that the primary table will be deployed
   * to. Replica tables will only be supported if the stack deployment region is defined.
   *
   * Default: - no replica tables
   */
  public fun replicas(): List<ReplicaTableProps> =
      unwrap(this).getReplicas()?.map(ReplicaTableProps::wrap) ?: emptyList()

  /**
   * Sort key attribute definition.
   *
   * Default: - no sort key
   */
  public fun sortKey(): Attribute? = unwrap(this).getSortKey()?.let(Attribute::wrap)

  /**
   * The name of the table.
   *
   * Default: - generated by CloudFormation
   */
  public fun tableName(): String? = unwrap(this).getTableName()

  /**
   * The name of the TTL attribute.
   *
   * Default: - TTL is disabled
   */
  public fun timeToLiveAttribute(): String? = unwrap(this).getTimeToLiveAttribute()

  /**
   * The warm throughput configuration for the table.
   *
   * Default: - no warm throughput is configured
   */
  public fun warmThroughput(): WarmThroughput? =
      unwrap(this).getWarmThroughput()?.let(WarmThroughput::wrap)

  /**
   * A builder for [TablePropsV2]
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * @param billing The billing mode and capacity settings to apply to the table.
     */
    public fun billing(billing: Billing)

    /**
     * @param contributorInsights Whether CloudWatch contributor insights is enabled.
     */
    public fun contributorInsights(contributorInsights: Boolean)

    /**
     * @param deletionProtection Whether deletion protection is enabled.
     */
    public fun deletionProtection(deletionProtection: Boolean)

    /**
     * @param dynamoStream When an item in the table is modified, StreamViewType determines what
     * information is written to the stream.
     */
    public fun dynamoStream(dynamoStream: StreamViewType)

    /**
     * @param encryption The server-side encryption.
     */
    public fun encryption(encryption: TableEncryptionV2)

    /**
     * @param globalSecondaryIndexes Global secondary indexes.
     * Note: You can provide a maximum of 20 global secondary indexes.
     */
    public fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexPropsV2>)

    /**
     * @param globalSecondaryIndexes Global secondary indexes.
     * Note: You can provide a maximum of 20 global secondary indexes.
     */
    public fun globalSecondaryIndexes(vararg globalSecondaryIndexes: GlobalSecondaryIndexPropsV2)

    /**
     * @param kinesisStream Kinesis Data Stream to capture item level changes.
     */
    public fun kinesisStream(kinesisStream: IStream)

    /**
     * @param localSecondaryIndexes Local secondary indexes.
     * Note: You can only provide a maximum of 5 local secondary indexes.
     */
    public fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexProps>)

    /**
     * @param localSecondaryIndexes Local secondary indexes.
     * Note: You can only provide a maximum of 5 local secondary indexes.
     */
    public fun localSecondaryIndexes(vararg localSecondaryIndexes: LocalSecondaryIndexProps)

    /**
     * @param partitionKey Partition key attribute definition. 
     */
    public fun partitionKey(partitionKey: Attribute)

    /**
     * @param partitionKey Partition key attribute definition. 
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("746aa2a75d8e291e9f9388498d8ffa585e49fc106f57258ffb6a4867044fb8ba")
    public fun partitionKey(partitionKey: Attribute.Builder.() -> Unit)

    /**
     * @param pointInTimeRecovery Whether point-in-time recovery is enabled.
     * @deprecated use `pointInTimeRecoverySpecification` instead
     */
    @Deprecated(message = "deprecated in CDK")
    public fun pointInTimeRecovery(pointInTimeRecovery: Boolean)

    /**
     * @param pointInTimeRecoverySpecification Whether point-in-time recovery is enabled and
     * recoveryPeriodInDays is set.
     */
    public
        fun pointInTimeRecoverySpecification(pointInTimeRecoverySpecification: PointInTimeRecoverySpecification)

    /**
     * @param pointInTimeRecoverySpecification Whether point-in-time recovery is enabled and
     * recoveryPeriodInDays is set.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("5f0f20e9a6f0d5d62943679d8e02f6314bbdf053fa7d4ff8af848e482510bc58")
    public
        fun pointInTimeRecoverySpecification(pointInTimeRecoverySpecification: PointInTimeRecoverySpecification.Builder.() -> Unit)

    /**
     * @param removalPolicy The removal policy applied to the table.
     */
    public fun removalPolicy(removalPolicy: RemovalPolicy)

    /**
     * @param replicas Replica tables to deploy with the primary table.
     * Note: Adding replica tables allows you to use your table as a global table. You
     * cannot specify a replica table in the region that the primary table will be deployed
     * to. Replica tables will only be supported if the stack deployment region is defined.
     */
    public fun replicas(replicas: List<ReplicaTableProps>)

    /**
     * @param replicas Replica tables to deploy with the primary table.
     * Note: Adding replica tables allows you to use your table as a global table. You
     * cannot specify a replica table in the region that the primary table will be deployed
     * to. Replica tables will only be supported if the stack deployment region is defined.
     */
    public fun replicas(vararg replicas: ReplicaTableProps)

    /**
     * @param resourcePolicy Resource policy to assign to DynamoDB Table.
     */
    public fun resourcePolicy(resourcePolicy: PolicyDocument)

    /**
     * @param resourcePolicy Resource policy to assign to DynamoDB Table.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("b9dfea9d7a274daf54e22bb1703665720d060a86cf5bd785640b17537027e25e")
    public fun resourcePolicy(resourcePolicy: PolicyDocument.Builder.() -> Unit)

    /**
     * @param sortKey Sort key attribute definition.
     */
    public fun sortKey(sortKey: Attribute)

    /**
     * @param sortKey Sort key attribute definition.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("14ce5fb3980aa792aa09fc6ca3f5c55b5b61c0b0556fb4d66902ed0d8fb41b9a")
    public fun sortKey(sortKey: Attribute.Builder.() -> Unit)

    /**
     * @param tableClass The table class.
     */
    public fun tableClass(tableClass: TableClass)

    /**
     * @param tableName The name of the table.
     */
    public fun tableName(tableName: String)

    /**
     * @param tags Tags to be applied to the primary table (default replica table).
     */
    public fun tags(tags: List<CfnTag>)

    /**
     * @param tags Tags to be applied to the primary table (default replica table).
     */
    public fun tags(vararg tags: CfnTag)

    /**
     * @param timeToLiveAttribute The name of the TTL attribute.
     */
    public fun timeToLiveAttribute(timeToLiveAttribute: String)

    /**
     * @param warmThroughput The warm throughput configuration for the table.
     */
    public fun warmThroughput(warmThroughput: WarmThroughput)

    /**
     * @param warmThroughput The warm throughput configuration for the table.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("d1032de76eaa9b5e0b2975fa6711434131c4cd1779a381c0a448e06a41f700fc")
    public fun warmThroughput(warmThroughput: WarmThroughput.Builder.() -> Unit)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.dynamodb.TablePropsV2.Builder =
        software.amazon.awscdk.services.dynamodb.TablePropsV2.builder()

    /**
     * @param billing The billing mode and capacity settings to apply to the table.
     */
    override fun billing(billing: Billing) {
      cdkBuilder.billing(billing.let(Billing.Companion::unwrap))
    }

    /**
     * @param contributorInsights Whether CloudWatch contributor insights is enabled.
     */
    override fun contributorInsights(contributorInsights: Boolean) {
      cdkBuilder.contributorInsights(contributorInsights)
    }

    /**
     * @param deletionProtection Whether deletion protection is enabled.
     */
    override fun deletionProtection(deletionProtection: Boolean) {
      cdkBuilder.deletionProtection(deletionProtection)
    }

    /**
     * @param dynamoStream When an item in the table is modified, StreamViewType determines what
     * information is written to the stream.
     */
    override fun dynamoStream(dynamoStream: StreamViewType) {
      cdkBuilder.dynamoStream(dynamoStream.let(StreamViewType.Companion::unwrap))
    }

    /**
     * @param encryption The server-side encryption.
     */
    override fun encryption(encryption: TableEncryptionV2) {
      cdkBuilder.encryption(encryption.let(TableEncryptionV2.Companion::unwrap))
    }

    /**
     * @param globalSecondaryIndexes Global secondary indexes.
     * Note: You can provide a maximum of 20 global secondary indexes.
     */
    override fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexPropsV2>) {
      cdkBuilder.globalSecondaryIndexes(globalSecondaryIndexes.map(GlobalSecondaryIndexPropsV2.Companion::unwrap))
    }

    /**
     * @param globalSecondaryIndexes Global secondary indexes.
     * Note: You can provide a maximum of 20 global secondary indexes.
     */
    override fun globalSecondaryIndexes(vararg globalSecondaryIndexes: GlobalSecondaryIndexPropsV2):
        Unit = globalSecondaryIndexes(globalSecondaryIndexes.toList())

    /**
     * @param kinesisStream Kinesis Data Stream to capture item level changes.
     */
    override fun kinesisStream(kinesisStream: IStream) {
      cdkBuilder.kinesisStream(kinesisStream.let(IStream.Companion::unwrap))
    }

    /**
     * @param localSecondaryIndexes Local secondary indexes.
     * Note: You can only provide a maximum of 5 local secondary indexes.
     */
    override fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexProps>) {
      cdkBuilder.localSecondaryIndexes(localSecondaryIndexes.map(LocalSecondaryIndexProps.Companion::unwrap))
    }

    /**
     * @param localSecondaryIndexes Local secondary indexes.
     * Note: You can only provide a maximum of 5 local secondary indexes.
     */
    override fun localSecondaryIndexes(vararg localSecondaryIndexes: LocalSecondaryIndexProps): Unit
        = localSecondaryIndexes(localSecondaryIndexes.toList())

    /**
     * @param partitionKey Partition key attribute definition. 
     */
    override fun partitionKey(partitionKey: Attribute) {
      cdkBuilder.partitionKey(partitionKey.let(Attribute.Companion::unwrap))
    }

    /**
     * @param partitionKey Partition key attribute definition. 
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("746aa2a75d8e291e9f9388498d8ffa585e49fc106f57258ffb6a4867044fb8ba")
    override fun partitionKey(partitionKey: Attribute.Builder.() -> Unit): Unit =
        partitionKey(Attribute(partitionKey))

    /**
     * @param pointInTimeRecovery Whether point-in-time recovery is enabled.
     * @deprecated use `pointInTimeRecoverySpecification` instead
     */
    @Deprecated(message = "deprecated in CDK")
    override fun pointInTimeRecovery(pointInTimeRecovery: Boolean) {
      cdkBuilder.pointInTimeRecovery(pointInTimeRecovery)
    }

    /**
     * @param pointInTimeRecoverySpecification Whether point-in-time recovery is enabled and
     * recoveryPeriodInDays is set.
     */
    override
        fun pointInTimeRecoverySpecification(pointInTimeRecoverySpecification: PointInTimeRecoverySpecification) {
      cdkBuilder.pointInTimeRecoverySpecification(pointInTimeRecoverySpecification.let(PointInTimeRecoverySpecification.Companion::unwrap))
    }

    /**
     * @param pointInTimeRecoverySpecification Whether point-in-time recovery is enabled and
     * recoveryPeriodInDays is set.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("5f0f20e9a6f0d5d62943679d8e02f6314bbdf053fa7d4ff8af848e482510bc58")
    override
        fun pointInTimeRecoverySpecification(pointInTimeRecoverySpecification: PointInTimeRecoverySpecification.Builder.() -> Unit):
        Unit =
        pointInTimeRecoverySpecification(PointInTimeRecoverySpecification(pointInTimeRecoverySpecification))

    /**
     * @param removalPolicy The removal policy applied to the table.
     */
    override fun removalPolicy(removalPolicy: RemovalPolicy) {
      cdkBuilder.removalPolicy(removalPolicy.let(RemovalPolicy.Companion::unwrap))
    }

    /**
     * @param replicas Replica tables to deploy with the primary table.
     * Note: Adding replica tables allows you to use your table as a global table. You
     * cannot specify a replica table in the region that the primary table will be deployed
     * to. Replica tables will only be supported if the stack deployment region is defined.
     */
    override fun replicas(replicas: List<ReplicaTableProps>) {
      cdkBuilder.replicas(replicas.map(ReplicaTableProps.Companion::unwrap))
    }

    /**
     * @param replicas Replica tables to deploy with the primary table.
     * Note: Adding replica tables allows you to use your table as a global table. You
     * cannot specify a replica table in the region that the primary table will be deployed
     * to. Replica tables will only be supported if the stack deployment region is defined.
     */
    override fun replicas(vararg replicas: ReplicaTableProps): Unit = replicas(replicas.toList())

    /**
     * @param resourcePolicy Resource policy to assign to DynamoDB Table.
     */
    override fun resourcePolicy(resourcePolicy: PolicyDocument) {
      cdkBuilder.resourcePolicy(resourcePolicy.let(PolicyDocument.Companion::unwrap))
    }

    /**
     * @param resourcePolicy Resource policy to assign to DynamoDB Table.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("b9dfea9d7a274daf54e22bb1703665720d060a86cf5bd785640b17537027e25e")
    override fun resourcePolicy(resourcePolicy: PolicyDocument.Builder.() -> Unit): Unit =
        resourcePolicy(PolicyDocument(resourcePolicy))

    /**
     * @param sortKey Sort key attribute definition.
     */
    override fun sortKey(sortKey: Attribute) {
      cdkBuilder.sortKey(sortKey.let(Attribute.Companion::unwrap))
    }

    /**
     * @param sortKey Sort key attribute definition.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("14ce5fb3980aa792aa09fc6ca3f5c55b5b61c0b0556fb4d66902ed0d8fb41b9a")
    override fun sortKey(sortKey: Attribute.Builder.() -> Unit): Unit = sortKey(Attribute(sortKey))

    /**
     * @param tableClass The table class.
     */
    override fun tableClass(tableClass: TableClass) {
      cdkBuilder.tableClass(tableClass.let(TableClass.Companion::unwrap))
    }

    /**
     * @param tableName The name of the table.
     */
    override fun tableName(tableName: String) {
      cdkBuilder.tableName(tableName)
    }

    /**
     * @param tags Tags to be applied to the primary table (default replica table).
     */
    override fun tags(tags: List<CfnTag>) {
      cdkBuilder.tags(tags.map(CfnTag.Companion::unwrap))
    }

    /**
     * @param tags Tags to be applied to the primary table (default replica table).
     */
    override fun tags(vararg tags: CfnTag): Unit = tags(tags.toList())

    /**
     * @param timeToLiveAttribute The name of the TTL attribute.
     */
    override fun timeToLiveAttribute(timeToLiveAttribute: String) {
      cdkBuilder.timeToLiveAttribute(timeToLiveAttribute)
    }

    /**
     * @param warmThroughput The warm throughput configuration for the table.
     */
    override fun warmThroughput(warmThroughput: WarmThroughput) {
      cdkBuilder.warmThroughput(warmThroughput.let(WarmThroughput.Companion::unwrap))
    }

    /**
     * @param warmThroughput The warm throughput configuration for the table.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("d1032de76eaa9b5e0b2975fa6711434131c4cd1779a381c0a448e06a41f700fc")
    override fun warmThroughput(warmThroughput: WarmThroughput.Builder.() -> Unit): Unit =
        warmThroughput(WarmThroughput(warmThroughput))

    public fun build(): software.amazon.awscdk.services.dynamodb.TablePropsV2 = cdkBuilder.build()
  }

  private class Wrapper(
    cdkObject: software.amazon.awscdk.services.dynamodb.TablePropsV2,
  ) : CdkObject(cdkObject),
      TablePropsV2 {
    /**
     * The billing mode and capacity settings to apply to the table.
     *
     * Default: Billing.onDemand()
     */
    override fun billing(): Billing? = unwrap(this).getBilling()?.let(Billing::wrap)

    /**
     * Whether CloudWatch contributor insights is enabled.
     *
     * Default: false
     */
    override fun contributorInsights(): Boolean? = unwrap(this).getContributorInsights()

    /**
     * Whether deletion protection is enabled.
     *
     * Default: false
     */
    override fun deletionProtection(): Boolean? = unwrap(this).getDeletionProtection()

    /**
     * When an item in the table is modified, StreamViewType determines what information is written
     * to the stream.
     *
     * Default: - streams are disabled if replicas are not configured and this property is
     * not specified. If this property is not specified when replicas are configured, then
     * NEW_AND_OLD_IMAGES will be the StreamViewType for all replicas
     */
    override fun dynamoStream(): StreamViewType? =
        unwrap(this).getDynamoStream()?.let(StreamViewType::wrap)

    /**
     * The server-side encryption.
     *
     * Default: TableEncryptionV2.dynamoOwnedKey()
     */
    override fun encryption(): TableEncryptionV2? =
        unwrap(this).getEncryption()?.let(TableEncryptionV2::wrap)

    /**
     * Global secondary indexes.
     *
     * Note: You can provide a maximum of 20 global secondary indexes.
     *
     * Default: - no global secondary indexes
     */
    override fun globalSecondaryIndexes(): List<GlobalSecondaryIndexPropsV2> =
        unwrap(this).getGlobalSecondaryIndexes()?.map(GlobalSecondaryIndexPropsV2::wrap) ?:
        emptyList()

    /**
     * Kinesis Data Stream to capture item level changes.
     *
     * Default: - no Kinesis Data Stream
     */
    override fun kinesisStream(): IStream? = unwrap(this).getKinesisStream()?.let(IStream::wrap)

    /**
     * Local secondary indexes.
     *
     * Note: You can only provide a maximum of 5 local secondary indexes.
     *
     * Default: - no local secondary indexes
     */
    override fun localSecondaryIndexes(): List<LocalSecondaryIndexProps> =
        unwrap(this).getLocalSecondaryIndexes()?.map(LocalSecondaryIndexProps::wrap) ?: emptyList()

    /**
     * Partition key attribute definition.
     */
    override fun partitionKey(): Attribute = unwrap(this).getPartitionKey().let(Attribute::wrap)

    /**
     * (deprecated) Whether point-in-time recovery is enabled.
     *
     * Default: false - point in time recovery is not enabled.
     *
     * @deprecated use `pointInTimeRecoverySpecification` instead
     */
    @Deprecated(message = "deprecated in CDK")
    override fun pointInTimeRecovery(): Boolean? = unwrap(this).getPointInTimeRecovery()

    /**
     * Whether point-in-time recovery is enabled and recoveryPeriodInDays is set.
     *
     * Default: - point in time recovery is not enabled.
     */
    override fun pointInTimeRecoverySpecification(): PointInTimeRecoverySpecification? =
        unwrap(this).getPointInTimeRecoverySpecification()?.let(PointInTimeRecoverySpecification::wrap)

    /**
     * The removal policy applied to the table.
     *
     * Default: RemovalPolicy.RETAIN
     */
    override fun removalPolicy(): RemovalPolicy? =
        unwrap(this).getRemovalPolicy()?.let(RemovalPolicy::wrap)

    /**
     * Replica tables to deploy with the primary table.
     *
     * Note: Adding replica tables allows you to use your table as a global table. You
     * cannot specify a replica table in the region that the primary table will be deployed
     * to. Replica tables will only be supported if the stack deployment region is defined.
     *
     * Default: - no replica tables
     */
    override fun replicas(): List<ReplicaTableProps> =
        unwrap(this).getReplicas()?.map(ReplicaTableProps::wrap) ?: emptyList()

    /**
     * Resource policy to assign to DynamoDB Table.
     *
     * Default: - No resource policy statements are added to the created table.
     *
     * [Documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-globaltable-replicaspecification.html#cfn-dynamodb-globaltable-replicaspecification-resourcepolicy)
     */
    override fun resourcePolicy(): PolicyDocument? =
        unwrap(this).getResourcePolicy()?.let(PolicyDocument::wrap)

    /**
     * Sort key attribute definition.
     *
     * Default: - no sort key
     */
    override fun sortKey(): Attribute? = unwrap(this).getSortKey()?.let(Attribute::wrap)

    /**
     * The table class.
     *
     * Default: TableClass.STANDARD
     */
    override fun tableClass(): TableClass? = unwrap(this).getTableClass()?.let(TableClass::wrap)

    /**
     * The name of the table.
     *
     * Default: - generated by CloudFormation
     */
    override fun tableName(): String? = unwrap(this).getTableName()

    /**
     * Tags to be applied to the primary table (default replica table).
     *
     * Default: - no tags
     */
    override fun tags(): List<CfnTag> = unwrap(this).getTags()?.map(CfnTag::wrap) ?: emptyList()

    /**
     * The name of the TTL attribute.
     *
     * Default: - TTL is disabled
     */
    override fun timeToLiveAttribute(): String? = unwrap(this).getTimeToLiveAttribute()

    /**
     * The warm throughput configuration for the table.
     *
     * Default: - no warm throughput is configured
     */
    override fun warmThroughput(): WarmThroughput? =
        unwrap(this).getWarmThroughput()?.let(WarmThroughput::wrap)
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): TablePropsV2 {
      val builderImpl = BuilderImpl()
      return Wrapper(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.dynamodb.TablePropsV2):
        TablePropsV2 = CdkObjectWrappers.wrap(cdkObject) as? TablePropsV2 ?: Wrapper(cdkObject)

    internal fun unwrap(wrapped: TablePropsV2):
        software.amazon.awscdk.services.dynamodb.TablePropsV2 = (wrapped as CdkObject).cdkObject as
        software.amazon.awscdk.services.dynamodb.TablePropsV2
  }
}
