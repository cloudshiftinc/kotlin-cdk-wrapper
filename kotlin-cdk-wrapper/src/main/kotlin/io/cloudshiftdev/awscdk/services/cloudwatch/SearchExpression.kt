@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.cloudwatch

import io.cloudshiftdev.awscdk.Duration
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import kotlin.Deprecated
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmName

/**
 * A CloudWatch search expression for dynamically finding and graphing multiple related metrics.
 *
 * Search expressions allow you to search for and graph multiple related metrics from a single
 * expression.
 * This is particularly useful in dynamic environments where the exact metric names or dimensions
 * may not be known at deployment time.
 *
 * Example:
 *
 * ```
 * SearchExpression searchExpression = SearchExpression.Builder.create()
 * .expression("SEARCH('{AWS/EC2,InstanceId} CPUUtilization', 'Average', 300)")
 * .label("EC2 CPU Utilization")
 * .period(Duration.minutes(5))
 * .build();
 * ```
 *
 * This class does not represent a resource, so hence is not a construct. Instead,
 * SearchExpression is an abstraction that makes it easy to specify metrics for use in graphs.
 *
 * Example:
 *
 * ```
 * SearchExpression cpuUtilization = SearchExpression.Builder.create()
 * .expression("SEARCH('{AWS/EC2,InstanceId} MetricName=\"CPUUtilization\"', 'Average', 900)")
 * .label("EC2 CPU Utilization")
 * .color("#ff7f0e")
 * .build();
 * ```
 */
public open class SearchExpression(
  cdkObject: software.amazon.awscdk.services.cloudwatch.SearchExpression,
) : CdkObject(cdkObject),
    IMetric {
  public constructor(props: SearchExpressionProps) :
      this(software.amazon.awscdk.services.cloudwatch.SearchExpression(props.let(SearchExpressionProps.Companion::unwrap))
  )

  public constructor(props: SearchExpressionProps.Builder.() -> Unit) :
      this(SearchExpressionProps(props)
  )

  /**
   * Hex color code (e.g. '#00ff00'), to use when rendering the resulting metrics in a graph. If
   * multiple time series are returned, color is assigned to the first metric, color for the other
   * metrics is automatically assigned.
   */
  public open fun color(): String? = unwrap(this).getColor()

  /**
   * The search expression defining the metrics to be retrieved.
   */
  public open fun expression(): String = unwrap(this).getExpression()

  /**
   * The label is used as a prefix for the title of each metric returned by the search expression.
   */
  public open fun label(): String? = unwrap(this).getLabel()

  /**
   * The aggregation period for the metrics produced by the Search Expression.
   */
  public open fun period(): Duration = unwrap(this).getPeriod().let(Duration::wrap)

  /**
   * Account to evaluate search expressions within.
   */
  public open fun searchAccount(): String? = unwrap(this).getSearchAccount()

  /**
   * Region to evaluate search expressions within.
   */
  public open fun searchRegion(): String? = unwrap(this).getSearchRegion()

  /**
   * Inspect the details of the metric object.
   */
  public override fun toMetricConfig(): MetricConfig =
      unwrap(this).toMetricConfig().let(MetricConfig::wrap)

  /**
   * (deprecated) Warnings generated by this search expression.
   *
   * * use warningsV2
   */
  @Deprecated(message = "deprecated in CDK")
  public override fun warnings(): List<String> = unwrap(this).getWarnings() ?: emptyList()

  /**
   * Warnings generated by this search expression.
   */
  public override fun warningsV2(): Map<String, String> = unwrap(this).getWarningsV2() ?: emptyMap()

  /**
   * Return a copy of SearchExpression with properties changed.
   *
   * All properties except expression can be changed.
   *
   * @param props The set of properties to change. 
   */
  public open fun with(props: SearchExpressionOptions): SearchExpression =
      unwrap(this).with(props.let(SearchExpressionOptions.Companion::unwrap)).let(SearchExpression::wrap)

  /**
   * Return a copy of SearchExpression with properties changed.
   *
   * All properties except expression can be changed.
   *
   * @param props The set of properties to change. 
   */
  @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("843e0cad155f81514ac8d0a189efd4a2e5857254f4f47c9a0e569f03fb6b3550")
  public open fun with(props: SearchExpressionOptions.Builder.() -> Unit): SearchExpression =
      with(SearchExpressionOptions(props))

  /**
   * A fluent builder for [io.cloudshiftdev.awscdk.services.cloudwatch.SearchExpression].
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * Color for the metric produced by the search expression.
     *
     * If the search expression produces more than one time series, the color is assigned to the
     * first one.
     * Other metrics are assigned colors automatically.
     *
     * Default: - Automatically assigned.
     *
     * @param color Color for the metric produced by the search expression. 
     */
    public fun color(color: String)

    /**
     * The search expression defining the metrics to be retrieved.
     *
     * A search expression cannot be used within an Alarm.
     *
     * A search expression allows you to retrieve and graph multiple related metrics in a single
     * statement.
     * It can return up to 500 time series.
     *
     * Examples:
     *
     * * `SEARCH('{AWS/EC2,InstanceId} CPUUtilization', 'Average', 300)`
     * * `SEARCH('{AWS/ApplicationELB,LoadBalancer} RequestCount', 'Sum', 60)`
     * * `SEARCH('{MyNamespace,ServiceName} Errors', 'Sum')`
     *
     * For more information about search expression syntax, see:
     * https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/search-expression-syntax.html
     *
     * @param expression The search expression defining the metrics to be retrieved. 
     */
    public fun expression(expression: String)

    /**
     * Label for this search expression when added to a Graph in a Dashboard.
     *
     * If this expression evaluates to more than one time series,
     * each time series will appear in the graph using a combination of the
     * expression label and the individual metric label. Specify the empty
     * string (`''`) to suppress the expression label and only keep the
     * metric label.
     *
     * You can use [dynamic
     * labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
     * to show summary information about the displayed time series
     * in the legend. For example, if you use:
     *
     * ```
     * [max: ${MAX}] MyMetric
     * ```
     *
     * As the metric label, the maximum value in the visible range will
     * be shown next to the time series name in the graph's legend. If the
     * search expression produces more than one time series, the maximum
     * will be shown for each individual time series produce by this
     * search expression.
     *
     * Default: - No label.
     *
     * @param label Label for this search expression when added to a Graph in a Dashboard. 
     */
    public fun label(label: String)

    /**
     * The period over which the search expression's statistics are applied.
     *
     * This period overrides the period defined within the search expression.
     *
     * Default: Duration.minutes(5)
     *
     * @param period The period over which the search expression's statistics are applied. 
     */
    public fun period(period: Duration)

    /**
     * Account to evaluate search expressions within.
     *
     * Default: - Deployment account.
     *
     * @param searchAccount Account to evaluate search expressions within. 
     */
    public fun searchAccount(searchAccount: String)

    /**
     * Region to evaluate search expressions within.
     *
     * Default: - Deployment region.
     *
     * @param searchRegion Region to evaluate search expressions within. 
     */
    public fun searchRegion(searchRegion: String)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.cloudwatch.SearchExpression.Builder =
        software.amazon.awscdk.services.cloudwatch.SearchExpression.Builder.create()

    /**
     * Color for the metric produced by the search expression.
     *
     * If the search expression produces more than one time series, the color is assigned to the
     * first one.
     * Other metrics are assigned colors automatically.
     *
     * Default: - Automatically assigned.
     *
     * @param color Color for the metric produced by the search expression. 
     */
    override fun color(color: String) {
      cdkBuilder.color(color)
    }

    /**
     * The search expression defining the metrics to be retrieved.
     *
     * A search expression cannot be used within an Alarm.
     *
     * A search expression allows you to retrieve and graph multiple related metrics in a single
     * statement.
     * It can return up to 500 time series.
     *
     * Examples:
     *
     * * `SEARCH('{AWS/EC2,InstanceId} CPUUtilization', 'Average', 300)`
     * * `SEARCH('{AWS/ApplicationELB,LoadBalancer} RequestCount', 'Sum', 60)`
     * * `SEARCH('{MyNamespace,ServiceName} Errors', 'Sum')`
     *
     * For more information about search expression syntax, see:
     * https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/search-expression-syntax.html
     *
     * @param expression The search expression defining the metrics to be retrieved. 
     */
    override fun expression(expression: String) {
      cdkBuilder.expression(expression)
    }

    /**
     * Label for this search expression when added to a Graph in a Dashboard.
     *
     * If this expression evaluates to more than one time series,
     * each time series will appear in the graph using a combination of the
     * expression label and the individual metric label. Specify the empty
     * string (`''`) to suppress the expression label and only keep the
     * metric label.
     *
     * You can use [dynamic
     * labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
     * to show summary information about the displayed time series
     * in the legend. For example, if you use:
     *
     * ```
     * [max: ${MAX}] MyMetric
     * ```
     *
     * As the metric label, the maximum value in the visible range will
     * be shown next to the time series name in the graph's legend. If the
     * search expression produces more than one time series, the maximum
     * will be shown for each individual time series produce by this
     * search expression.
     *
     * Default: - No label.
     *
     * @param label Label for this search expression when added to a Graph in a Dashboard. 
     */
    override fun label(label: String) {
      cdkBuilder.label(label)
    }

    /**
     * The period over which the search expression's statistics are applied.
     *
     * This period overrides the period defined within the search expression.
     *
     * Default: Duration.minutes(5)
     *
     * @param period The period over which the search expression's statistics are applied. 
     */
    override fun period(period: Duration) {
      cdkBuilder.period(period.let(Duration.Companion::unwrap))
    }

    /**
     * Account to evaluate search expressions within.
     *
     * Default: - Deployment account.
     *
     * @param searchAccount Account to evaluate search expressions within. 
     */
    override fun searchAccount(searchAccount: String) {
      cdkBuilder.searchAccount(searchAccount)
    }

    /**
     * Region to evaluate search expressions within.
     *
     * Default: - Deployment region.
     *
     * @param searchRegion Region to evaluate search expressions within. 
     */
    override fun searchRegion(searchRegion: String) {
      cdkBuilder.searchRegion(searchRegion)
    }

    public fun build(): software.amazon.awscdk.services.cloudwatch.SearchExpression =
        cdkBuilder.build()
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): SearchExpression {
      val builderImpl = BuilderImpl()
      return SearchExpression(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.cloudwatch.SearchExpression):
        SearchExpression = SearchExpression(cdkObject)

    internal fun unwrap(wrapped: SearchExpression):
        software.amazon.awscdk.services.cloudwatch.SearchExpression = wrapped.cdkObject as
        software.amazon.awscdk.services.cloudwatch.SearchExpression
  }
}
