@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.route53

import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import io.cloudshiftdev.awscdk.services.kms.IKey
import kotlin.String
import kotlin.Unit

/**
 * Options for enabling key signing from a hosted zone.
 *
 * Example:
 *
 * ```
 * Key kmsKey = Key.Builder.create(this, "KmsCMK")
 * .keySpec(KeySpec.ECC_NIST_P256)
 * .keyUsage(KeyUsage.SIGN_VERIFY)
 * .build();
 * HostedZone hostedZone = HostedZone.Builder.create(this, "HostedZone")
 * .zoneName("example.com")
 * .build();
 * // Enable DNSSEC signing for the zone
 * hostedZone.enableDnssec(ZoneSigningOptions.builder().kmsKey(kmsKey).build());
 * ```
 */
public interface ZoneSigningOptions {
  /**
   * The name for the key signing key.
   *
   * This name must be unique within a hosted zone.
   *
   * Default: an autogenerated name
   */
  public fun keySigningKeyName(): String? = unwrap(this).getKeySigningKeyName()

  /**
   * The customer-managed KMS key that that will be used to sign the records.
   *
   * The KMS Key must be unique for each KSK within a hosted zone. Additionally, the
   * KMS key must be an asymetric customer-managed key using the ECC_NIST_P256 algorithm.
   *
   * [Documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html)
   */
  public fun kmsKey(): IKey

  /**
   * A builder for [ZoneSigningOptions]
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * @param keySigningKeyName The name for the key signing key.
     * This name must be unique within a hosted zone.
     */
    public fun keySigningKeyName(keySigningKeyName: String)

    /**
     * @param kmsKey The customer-managed KMS key that that will be used to sign the records. 
     * The KMS Key must be unique for each KSK within a hosted zone. Additionally, the
     * KMS key must be an asymetric customer-managed key using the ECC_NIST_P256 algorithm.
     */
    public fun kmsKey(kmsKey: IKey)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.route53.ZoneSigningOptions.Builder =
        software.amazon.awscdk.services.route53.ZoneSigningOptions.builder()

    /**
     * @param keySigningKeyName The name for the key signing key.
     * This name must be unique within a hosted zone.
     */
    override fun keySigningKeyName(keySigningKeyName: String) {
      cdkBuilder.keySigningKeyName(keySigningKeyName)
    }

    /**
     * @param kmsKey The customer-managed KMS key that that will be used to sign the records. 
     * The KMS Key must be unique for each KSK within a hosted zone. Additionally, the
     * KMS key must be an asymetric customer-managed key using the ECC_NIST_P256 algorithm.
     */
    override fun kmsKey(kmsKey: IKey) {
      cdkBuilder.kmsKey(kmsKey.let(IKey.Companion::unwrap))
    }

    public fun build(): software.amazon.awscdk.services.route53.ZoneSigningOptions =
        cdkBuilder.build()
  }

  private class Wrapper(
    cdkObject: software.amazon.awscdk.services.route53.ZoneSigningOptions,
  ) : CdkObject(cdkObject), ZoneSigningOptions {
    /**
     * The name for the key signing key.
     *
     * This name must be unique within a hosted zone.
     *
     * Default: an autogenerated name
     */
    override fun keySigningKeyName(): String? = unwrap(this).getKeySigningKeyName()

    /**
     * The customer-managed KMS key that that will be used to sign the records.
     *
     * The KMS Key must be unique for each KSK within a hosted zone. Additionally, the
     * KMS key must be an asymetric customer-managed key using the ECC_NIST_P256 algorithm.
     *
     * [Documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html)
     */
    override fun kmsKey(): IKey = unwrap(this).getKmsKey().let(IKey::wrap)
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): ZoneSigningOptions {
      val builderImpl = BuilderImpl()
      return Wrapper(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.route53.ZoneSigningOptions):
        ZoneSigningOptions = CdkObjectWrappers.wrap(cdkObject) as? ZoneSigningOptions ?:
        Wrapper(cdkObject)

    internal fun unwrap(wrapped: ZoneSigningOptions):
        software.amazon.awscdk.services.route53.ZoneSigningOptions = (wrapped as
        CdkObject).cdkObject as software.amazon.awscdk.services.route53.ZoneSigningOptions
  }
}
