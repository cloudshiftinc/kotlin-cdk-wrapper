@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.appsync

import io.cloudshiftdev.awscdk.CfnResource
import io.cloudshiftdev.awscdk.CfnTag
import io.cloudshiftdev.awscdk.IInspectable
import io.cloudshiftdev.awscdk.IResolvable
import io.cloudshiftdev.awscdk.ITaggableV2
import io.cloudshiftdev.awscdk.TagManager
import io.cloudshiftdev.awscdk.TreeInspector
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import kotlin.Any
import kotlin.Number
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmName
import io.cloudshiftdev.constructs.Construct as CloudshiftdevConstructsConstruct
import software.constructs.Construct as SoftwareConstructsConstruct

/**
 * The `AWS::AppSync::Api` resource creates an AWS AppSync API that you can use for an AWS AppSync
 * API with your preferred configuration, such as an Event API that provides real-time message
 * publishing and message subscriptions over WebSockets.
 *
 * Example:
 *
 * ```
 * // The code below shows an example of how to instantiate this type.
 * // The values are placeholders you should change.
 * import io.cloudshiftdev.awscdk.services.appsync.*;
 * CfnApi cfnApi = CfnApi.Builder.create(this, "MyCfnApi")
 * .name("name")
 * // the properties below are optional
 * .eventConfig(EventConfigProperty.builder()
 * .authProviders(List.of(AuthProviderProperty.builder()
 * .authType("authType")
 * // the properties below are optional
 * .cognitoConfig(CognitoConfigProperty.builder()
 * .awsRegion("awsRegion")
 * .userPoolId("userPoolId")
 * // the properties below are optional
 * .appIdClientRegex("appIdClientRegex")
 * .build())
 * .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()
 * .authorizerUri("authorizerUri")
 * // the properties below are optional
 * .authorizerResultTtlInSeconds(123)
 * .identityValidationExpression("identityValidationExpression")
 * .build())
 * .openIdConnectConfig(OpenIDConnectConfigProperty.builder()
 * .issuer("issuer")
 * // the properties below are optional
 * .authTtl(123)
 * .clientId("clientId")
 * .iatTtl(123)
 * .build())
 * .build()))
 * .connectionAuthModes(List.of(AuthModeProperty.builder()
 * .authType("authType")
 * .build()))
 * .defaultPublishAuthModes(List.of(AuthModeProperty.builder()
 * .authType("authType")
 * .build()))
 * .defaultSubscribeAuthModes(List.of(AuthModeProperty.builder()
 * .authType("authType")
 * .build()))
 * // the properties below are optional
 * .logConfig(EventLogConfigProperty.builder()
 * .cloudWatchLogsRoleArn("cloudWatchLogsRoleArn")
 * .logLevel("logLevel")
 * .build())
 * .build())
 * .ownerContact("ownerContact")
 * .tags(List.of(CfnTag.builder()
 * .key("key")
 * .value("value")
 * .build()))
 * .build();
 * ```
 *
 * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html)
 */
public open class CfnApi(
  cdkObject: software.amazon.awscdk.services.appsync.CfnApi,
) : CfnResource(cdkObject),
    IInspectable,
    ITaggableV2 {
  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: CfnApiProps,
  ) :
      this(software.amazon.awscdk.services.appsync.CfnApi(scope.let(CloudshiftdevConstructsConstruct.Companion::unwrap),
      id, props.let(CfnApiProps.Companion::unwrap))
  )

  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: CfnApiProps.Builder.() -> Unit,
  ) : this(scope, id, CfnApiProps(props)
  )

  /**
   * The Amazon Resource Name (ARN) of the AWS AppSync Api.
   */
  public open fun attrApiArn(): String = unwrap(this).getAttrApiArn()

  /**
   * The unique identifier for the AWS AppSync Api generated by the service.
   */
  public open fun attrApiId(): String = unwrap(this).getAttrApiId()

  /**
   * A map of DNS names for the AppSync API.
   */
  public open fun attrDns(): IResolvable = unwrap(this).getAttrDns().let(IResolvable::wrap)

  /**
   * The domain name of the Api's HTTP endpoint.
   */
  public open fun attrDnsHttp(): String = unwrap(this).getAttrDnsHttp()

  /**
   * The domain name of the Api's real-time endpoint.
   */
  public open fun attrDnsRealtime(): String = unwrap(this).getAttrDnsRealtime()

  /**
   * Tag Manager which manages the tags for this resource.
   */
  public override fun cdkTagManager(): TagManager =
      unwrap(this).getCdkTagManager().let(TagManager::wrap)

  /**
   * Describes the authorization configuration for connections, message publishing, message
   * subscriptions, and logging for an Event API.
   */
  public open fun eventConfig(): Any? = unwrap(this).getEventConfig()

  /**
   * Describes the authorization configuration for connections, message publishing, message
   * subscriptions, and logging for an Event API.
   */
  public open fun eventConfig(`value`: IResolvable) {
    unwrap(this).setEventConfig(`value`.let(IResolvable.Companion::unwrap))
  }

  /**
   * Describes the authorization configuration for connections, message publishing, message
   * subscriptions, and logging for an Event API.
   */
  public open fun eventConfig(`value`: EventConfigProperty) {
    unwrap(this).setEventConfig(`value`.let(EventConfigProperty.Companion::unwrap))
  }

  /**
   * Describes the authorization configuration for connections, message publishing, message
   * subscriptions, and logging for an Event API.
   */
  @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("a6f51beadf112f11e874a1c172c5149f1e2e60b734fd820ff047834eb70b4a60")
  public open fun eventConfig(`value`: EventConfigProperty.Builder.() -> Unit): Unit =
      eventConfig(EventConfigProperty(`value`))

  /**
   * Examines the CloudFormation resource and discloses attributes.
   *
   * @param inspector tree inspector to collect and process attributes. 
   */
  public override fun inspect(inspector: TreeInspector) {
    unwrap(this).inspect(inspector.let(TreeInspector.Companion::unwrap))
  }

  /**
   * The name of the `Api` .
   */
  public open fun name(): String = unwrap(this).getName()

  /**
   * The name of the `Api` .
   */
  public open fun name(`value`: String) {
    unwrap(this).setName(`value`)
  }

  /**
   * The owner contact information for an API resource.
   */
  public open fun ownerContact(): String? = unwrap(this).getOwnerContact()

  /**
   * The owner contact information for an API resource.
   */
  public open fun ownerContact(`value`: String) {
    unwrap(this).setOwnerContact(`value`)
  }

  /**
   * A set of tags (key-value pairs) for this API.
   */
  public open fun tags(): List<CfnTag> = unwrap(this).getTags()?.map(CfnTag::wrap) ?: emptyList()

  /**
   * A set of tags (key-value pairs) for this API.
   */
  public open fun tags(`value`: List<CfnTag>) {
    unwrap(this).setTags(`value`.map(CfnTag.Companion::unwrap))
  }

  /**
   * A set of tags (key-value pairs) for this API.
   */
  public open fun tags(vararg `value`: CfnTag): Unit = tags(`value`.toList())

  /**
   * A fluent builder for [io.cloudshiftdev.awscdk.services.appsync.CfnApi].
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    public fun eventConfig(eventConfig: IResolvable)

    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    public fun eventConfig(eventConfig: EventConfigProperty)

    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("92626da74e52249e5c0494d9d90f99c5d13c8b0e3caac673948cfb33cb074f2d")
    public fun eventConfig(eventConfig: EventConfigProperty.Builder.() -> Unit)

    /**
     * The name of the `Api` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-name)
     * @param name The name of the `Api` . 
     */
    public fun name(name: String)

    /**
     * The owner contact information for an API resource.
     *
     * This field accepts any string input with a length of 0 - 256 characters.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-ownercontact)
     * @param ownerContact The owner contact information for an API resource. 
     */
    public fun ownerContact(ownerContact: String)

    /**
     * A set of tags (key-value pairs) for this API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-tags)
     * @param tags A set of tags (key-value pairs) for this API. 
     */
    public fun tags(tags: List<CfnTag>)

    /**
     * A set of tags (key-value pairs) for this API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-tags)
     * @param tags A set of tags (key-value pairs) for this API. 
     */
    public fun tags(vararg tags: CfnTag)
  }

  private class BuilderImpl(
    scope: SoftwareConstructsConstruct,
    id: String,
  ) : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.appsync.CfnApi.Builder =
        software.amazon.awscdk.services.appsync.CfnApi.Builder.create(scope, id)

    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    override fun eventConfig(eventConfig: IResolvable) {
      cdkBuilder.eventConfig(eventConfig.let(IResolvable.Companion::unwrap))
    }

    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    override fun eventConfig(eventConfig: EventConfigProperty) {
      cdkBuilder.eventConfig(eventConfig.let(EventConfigProperty.Companion::unwrap))
    }

    /**
     * Describes the authorization configuration for connections, message publishing, message
     * subscriptions, and logging for an Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-eventconfig)
     * @param eventConfig Describes the authorization configuration for connections, message
     * publishing, message subscriptions, and logging for an Event API. 
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("92626da74e52249e5c0494d9d90f99c5d13c8b0e3caac673948cfb33cb074f2d")
    override fun eventConfig(eventConfig: EventConfigProperty.Builder.() -> Unit): Unit =
        eventConfig(EventConfigProperty(eventConfig))

    /**
     * The name of the `Api` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-name)
     * @param name The name of the `Api` . 
     */
    override fun name(name: String) {
      cdkBuilder.name(name)
    }

    /**
     * The owner contact information for an API resource.
     *
     * This field accepts any string input with a length of 0 - 256 characters.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-ownercontact)
     * @param ownerContact The owner contact information for an API resource. 
     */
    override fun ownerContact(ownerContact: String) {
      cdkBuilder.ownerContact(ownerContact)
    }

    /**
     * A set of tags (key-value pairs) for this API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-tags)
     * @param tags A set of tags (key-value pairs) for this API. 
     */
    override fun tags(tags: List<CfnTag>) {
      cdkBuilder.tags(tags.map(CfnTag.Companion::unwrap))
    }

    /**
     * A set of tags (key-value pairs) for this API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-api.html#cfn-appsync-api-tags)
     * @param tags A set of tags (key-value pairs) for this API. 
     */
    override fun tags(vararg tags: CfnTag): Unit = tags(tags.toList())

    public fun build(): software.amazon.awscdk.services.appsync.CfnApi = cdkBuilder.build()
  }

  public companion object {
    public val CFN_RESOURCE_TYPE_NAME: String =
        software.amazon.awscdk.services.appsync.CfnApi.CFN_RESOURCE_TYPE_NAME

    public operator fun invoke(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      block: Builder.() -> Unit = {},
    ): CfnApi {
      val builderImpl = BuilderImpl(CloudshiftdevConstructsConstruct.unwrap(scope), id)
      return CfnApi(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi): CfnApi =
        CfnApi(cdkObject)

    internal fun unwrap(wrapped: CfnApi): software.amazon.awscdk.services.appsync.CfnApi =
        wrapped.cdkObject as software.amazon.awscdk.services.appsync.CfnApi
  }

  /**
   * Describes an authorization configuration.
   *
   * Use `AuthMode` to specify the publishing and subscription authorization configuration for an
   * Event API.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * AuthModeProperty authModeProperty = AuthModeProperty.builder()
   * .authType("authType")
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authmode.html)
   */
  public interface AuthModeProperty {
    /**
     * The authorization type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authmode.html#cfn-appsync-api-authmode-authtype)
     */
    public fun authType(): String? = unwrap(this).getAuthType()

    /**
     * A builder for [AuthModeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param authType The authorization type.
       */
      public fun authType(authType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty.builder()

      /**
       * @param authType The authorization type.
       */
      override fun authType(authType: String) {
        cdkBuilder.authType(authType)
      }

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty,
    ) : CdkObject(cdkObject),
        AuthModeProperty {
      /**
       * The authorization type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authmode.html#cfn-appsync-api-authmode-authtype)
       */
      override fun authType(): String? = unwrap(this).getAuthType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AuthModeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty):
          AuthModeProperty = CdkObjectWrappers.wrap(cdkObject) as? AuthModeProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: AuthModeProperty):
          software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty = (wrapped as
          CdkObject).cdkObject as software.amazon.awscdk.services.appsync.CfnApi.AuthModeProperty
    }
  }

  /**
   * Describes an authorization provider.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * AuthProviderProperty authProviderProperty = AuthProviderProperty.builder()
   * .authType("authType")
   * // the properties below are optional
   * .cognitoConfig(CognitoConfigProperty.builder()
   * .awsRegion("awsRegion")
   * .userPoolId("userPoolId")
   * // the properties below are optional
   * .appIdClientRegex("appIdClientRegex")
   * .build())
   * .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()
   * .authorizerUri("authorizerUri")
   * // the properties below are optional
   * .authorizerResultTtlInSeconds(123)
   * .identityValidationExpression("identityValidationExpression")
   * .build())
   * .openIdConnectConfig(OpenIDConnectConfigProperty.builder()
   * .issuer("issuer")
   * // the properties below are optional
   * .authTtl(123)
   * .clientId("clientId")
   * .iatTtl(123)
   * .build())
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html)
   */
  public interface AuthProviderProperty {
    /**
     * The authorization type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-authtype)
     */
    public fun authType(): String

    /**
     * Describes an Amazon Cognito user pool configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-cognitoconfig)
     */
    public fun cognitoConfig(): Any? = unwrap(this).getCognitoConfig()

    /**
     * A `LambdaAuthorizerConfig` specifies how to authorize AWS AppSync API access when using the
     * `AWS_LAMBDA` authorizer mode.
     *
     * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
     * time.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-lambdaauthorizerconfig)
     */
    public fun lambdaAuthorizerConfig(): Any? = unwrap(this).getLambdaAuthorizerConfig()

    /**
     * Describes an OpenID Connect (OIDC) configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-openidconnectconfig)
     */
    public fun openIdConnectConfig(): Any? = unwrap(this).getOpenIdConnectConfig()

    /**
     * A builder for [AuthProviderProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param authType The authorization type. 
       */
      public fun authType(authType: String)

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      public fun cognitoConfig(cognitoConfig: IResolvable)

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      public fun cognitoConfig(cognitoConfig: CognitoConfigProperty)

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("21696fbc28206b9ab9fe221b4552fd774159bdb9d2fd2048cf9c1112f02385b1")
      public fun cognitoConfig(cognitoConfig: CognitoConfigProperty.Builder.() -> Unit)

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      public fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: IResolvable)

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      public fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: LambdaAuthorizerConfigProperty)

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("864149ee1dfc5ca6cbb3cd7a269a5ce8ade766c40ebb5a06e66b88b7f0992696")
      public
          fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: LambdaAuthorizerConfigProperty.Builder.() -> Unit)

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      public fun openIdConnectConfig(openIdConnectConfig: IResolvable)

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      public fun openIdConnectConfig(openIdConnectConfig: OpenIDConnectConfigProperty)

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("662e71260eaca6f52748e51de43c9b680a4a3b6439ebee4ec99087271bbd0c37")
      public
          fun openIdConnectConfig(openIdConnectConfig: OpenIDConnectConfigProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty.builder()

      /**
       * @param authType The authorization type. 
       */
      override fun authType(authType: String) {
        cdkBuilder.authType(authType)
      }

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      override fun cognitoConfig(cognitoConfig: IResolvable) {
        cdkBuilder.cognitoConfig(cognitoConfig.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      override fun cognitoConfig(cognitoConfig: CognitoConfigProperty) {
        cdkBuilder.cognitoConfig(cognitoConfig.let(CognitoConfigProperty.Companion::unwrap))
      }

      /**
       * @param cognitoConfig Describes an Amazon Cognito user pool configuration.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("21696fbc28206b9ab9fe221b4552fd774159bdb9d2fd2048cf9c1112f02385b1")
      override fun cognitoConfig(cognitoConfig: CognitoConfigProperty.Builder.() -> Unit): Unit =
          cognitoConfig(CognitoConfigProperty(cognitoConfig))

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      override fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: IResolvable) {
        cdkBuilder.lambdaAuthorizerConfig(lambdaAuthorizerConfig.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      override fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: LambdaAuthorizerConfigProperty) {
        cdkBuilder.lambdaAuthorizerConfig(lambdaAuthorizerConfig.let(LambdaAuthorizerConfigProperty.Companion::unwrap))
      }

      /**
       * @param lambdaAuthorizerConfig A `LambdaAuthorizerConfig` specifies how to authorize AWS
       * AppSync API access when using the `AWS_LAMBDA` authorizer mode.
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("864149ee1dfc5ca6cbb3cd7a269a5ce8ade766c40ebb5a06e66b88b7f0992696")
      override
          fun lambdaAuthorizerConfig(lambdaAuthorizerConfig: LambdaAuthorizerConfigProperty.Builder.() -> Unit):
          Unit = lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty(lambdaAuthorizerConfig))

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      override fun openIdConnectConfig(openIdConnectConfig: IResolvable) {
        cdkBuilder.openIdConnectConfig(openIdConnectConfig.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      override fun openIdConnectConfig(openIdConnectConfig: OpenIDConnectConfigProperty) {
        cdkBuilder.openIdConnectConfig(openIdConnectConfig.let(OpenIDConnectConfigProperty.Companion::unwrap))
      }

      /**
       * @param openIdConnectConfig Describes an OpenID Connect (OIDC) configuration.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("662e71260eaca6f52748e51de43c9b680a4a3b6439ebee4ec99087271bbd0c37")
      override
          fun openIdConnectConfig(openIdConnectConfig: OpenIDConnectConfigProperty.Builder.() -> Unit):
          Unit = openIdConnectConfig(OpenIDConnectConfigProperty(openIdConnectConfig))

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty,
    ) : CdkObject(cdkObject),
        AuthProviderProperty {
      /**
       * The authorization type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-authtype)
       */
      override fun authType(): String = unwrap(this).getAuthType()

      /**
       * Describes an Amazon Cognito user pool configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-cognitoconfig)
       */
      override fun cognitoConfig(): Any? = unwrap(this).getCognitoConfig()

      /**
       * A `LambdaAuthorizerConfig` specifies how to authorize AWS AppSync API access when using the
       * `AWS_LAMBDA` authorizer mode.
       *
       * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a
       * time.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-lambdaauthorizerconfig)
       */
      override fun lambdaAuthorizerConfig(): Any? = unwrap(this).getLambdaAuthorizerConfig()

      /**
       * Describes an OpenID Connect (OIDC) configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-authprovider.html#cfn-appsync-api-authprovider-openidconnectconfig)
       */
      override fun openIdConnectConfig(): Any? = unwrap(this).getOpenIdConnectConfig()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AuthProviderProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty):
          AuthProviderProperty = CdkObjectWrappers.wrap(cdkObject) as? AuthProviderProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: AuthProviderProperty):
          software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.appsync.CfnApi.AuthProviderProperty
    }
  }

  /**
   * Describes an Amazon Cognito configuration.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * CognitoConfigProperty cognitoConfigProperty = CognitoConfigProperty.builder()
   * .awsRegion("awsRegion")
   * .userPoolId("userPoolId")
   * // the properties below are optional
   * .appIdClientRegex("appIdClientRegex")
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html)
   */
  public interface CognitoConfigProperty {
    /**
     * A regular expression for validating the incoming Amazon Cognito user pool app client ID.
     *
     * If this value isn't set, no filtering is applied.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-appidclientregex)
     */
    public fun appIdClientRegex(): String? = unwrap(this).getAppIdClientRegex()

    /**
     * The AWS Region in which the user pool was created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-awsregion)
     */
    public fun awsRegion(): String

    /**
     * The user pool ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-userpoolid)
     */
    public fun userPoolId(): String

    /**
     * A builder for [CognitoConfigProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param appIdClientRegex A regular expression for validating the incoming Amazon Cognito
       * user pool app client ID.
       * If this value isn't set, no filtering is applied.
       */
      public fun appIdClientRegex(appIdClientRegex: String)

      /**
       * @param awsRegion The AWS Region in which the user pool was created. 
       */
      public fun awsRegion(awsRegion: String)

      /**
       * @param userPoolId The user pool ID. 
       */
      public fun userPoolId(userPoolId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty.builder()

      /**
       * @param appIdClientRegex A regular expression for validating the incoming Amazon Cognito
       * user pool app client ID.
       * If this value isn't set, no filtering is applied.
       */
      override fun appIdClientRegex(appIdClientRegex: String) {
        cdkBuilder.appIdClientRegex(appIdClientRegex)
      }

      /**
       * @param awsRegion The AWS Region in which the user pool was created. 
       */
      override fun awsRegion(awsRegion: String) {
        cdkBuilder.awsRegion(awsRegion)
      }

      /**
       * @param userPoolId The user pool ID. 
       */
      override fun userPoolId(userPoolId: String) {
        cdkBuilder.userPoolId(userPoolId)
      }

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty,
    ) : CdkObject(cdkObject),
        CognitoConfigProperty {
      /**
       * A regular expression for validating the incoming Amazon Cognito user pool app client ID.
       *
       * If this value isn't set, no filtering is applied.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-appidclientregex)
       */
      override fun appIdClientRegex(): String? = unwrap(this).getAppIdClientRegex()

      /**
       * The AWS Region in which the user pool was created.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-awsregion)
       */
      override fun awsRegion(): String = unwrap(this).getAwsRegion()

      /**
       * The user pool ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-cognitoconfig.html#cfn-appsync-api-cognitoconfig-userpoolid)
       */
      override fun userPoolId(): String = unwrap(this).getUserPoolId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CognitoConfigProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty):
          CognitoConfigProperty = CdkObjectWrappers.wrap(cdkObject) as? CognitoConfigProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: CognitoConfigProperty):
          software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.appsync.CfnApi.CognitoConfigProperty
    }
  }

  /**
   * A map of DNS names for the Api.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * DnsMapProperty dnsMapProperty = DnsMapProperty.builder()
   * .http("http")
   * .realtime("realtime")
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-dnsmap.html)
   */
  public interface DnsMapProperty {
    /**
     * The domain name of the Api's HTTP endpoint.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-dnsmap.html#cfn-appsync-api-dnsmap-http)
     */
    public fun http(): String? = unwrap(this).getHttp()

    /**
     * The domain name of the Api's real-time endpoint.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-dnsmap.html#cfn-appsync-api-dnsmap-realtime)
     */
    public fun realtime(): String? = unwrap(this).getRealtime()

    /**
     * A builder for [DnsMapProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param http The domain name of the Api's HTTP endpoint.
       */
      public fun http(http: String)

      /**
       * @param realtime The domain name of the Api's real-time endpoint.
       */
      public fun realtime(realtime: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder: software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty.Builder
          = software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty.builder()

      /**
       * @param http The domain name of the Api's HTTP endpoint.
       */
      override fun http(http: String) {
        cdkBuilder.http(http)
      }

      /**
       * @param realtime The domain name of the Api's real-time endpoint.
       */
      override fun realtime(realtime: String) {
        cdkBuilder.realtime(realtime)
      }

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty,
    ) : CdkObject(cdkObject),
        DnsMapProperty {
      /**
       * The domain name of the Api's HTTP endpoint.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-dnsmap.html#cfn-appsync-api-dnsmap-http)
       */
      override fun http(): String? = unwrap(this).getHttp()

      /**
       * The domain name of the Api's real-time endpoint.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-dnsmap.html#cfn-appsync-api-dnsmap-realtime)
       */
      override fun realtime(): String? = unwrap(this).getRealtime()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DnsMapProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty):
          DnsMapProperty = CdkObjectWrappers.wrap(cdkObject) as? DnsMapProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: DnsMapProperty):
          software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty = (wrapped as
          CdkObject).cdkObject as software.amazon.awscdk.services.appsync.CfnApi.DnsMapProperty
    }
  }

  /**
   * Describes the authorization configuration for connections, message publishing, message
   * subscriptions, and logging for an Event API.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * EventConfigProperty eventConfigProperty = EventConfigProperty.builder()
   * .authProviders(List.of(AuthProviderProperty.builder()
   * .authType("authType")
   * // the properties below are optional
   * .cognitoConfig(CognitoConfigProperty.builder()
   * .awsRegion("awsRegion")
   * .userPoolId("userPoolId")
   * // the properties below are optional
   * .appIdClientRegex("appIdClientRegex")
   * .build())
   * .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()
   * .authorizerUri("authorizerUri")
   * // the properties below are optional
   * .authorizerResultTtlInSeconds(123)
   * .identityValidationExpression("identityValidationExpression")
   * .build())
   * .openIdConnectConfig(OpenIDConnectConfigProperty.builder()
   * .issuer("issuer")
   * // the properties below are optional
   * .authTtl(123)
   * .clientId("clientId")
   * .iatTtl(123)
   * .build())
   * .build()))
   * .connectionAuthModes(List.of(AuthModeProperty.builder()
   * .authType("authType")
   * .build()))
   * .defaultPublishAuthModes(List.of(AuthModeProperty.builder()
   * .authType("authType")
   * .build()))
   * .defaultSubscribeAuthModes(List.of(AuthModeProperty.builder()
   * .authType("authType")
   * .build()))
   * // the properties below are optional
   * .logConfig(EventLogConfigProperty.builder()
   * .cloudWatchLogsRoleArn("cloudWatchLogsRoleArn")
   * .logLevel("logLevel")
   * .build())
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html)
   */
  public interface EventConfigProperty {
    /**
     * A list of authorization providers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-authproviders)
     */
    public fun authProviders(): Any

    /**
     * A list of valid authorization modes for the Event API connections.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-connectionauthmodes)
     */
    public fun connectionAuthModes(): Any

    /**
     * A list of valid authorization modes for the Event API publishing.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-defaultpublishauthmodes)
     */
    public fun defaultPublishAuthModes(): Any

    /**
     * A list of valid authorization modes for the Event API subscriptions.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-defaultsubscribeauthmodes)
     */
    public fun defaultSubscribeAuthModes(): Any

    /**
     * The CloudWatch Logs configuration for the Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-logconfig)
     */
    public fun logConfig(): Any? = unwrap(this).getLogConfig()

    /**
     * A builder for [EventConfigProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param authProviders A list of authorization providers. 
       */
      public fun authProviders(authProviders: IResolvable)

      /**
       * @param authProviders A list of authorization providers. 
       */
      public fun authProviders(authProviders: List<Any>)

      /**
       * @param authProviders A list of authorization providers. 
       */
      public fun authProviders(vararg authProviders: Any)

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      public fun connectionAuthModes(connectionAuthModes: IResolvable)

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      public fun connectionAuthModes(connectionAuthModes: List<Any>)

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      public fun connectionAuthModes(vararg connectionAuthModes: Any)

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      public fun defaultPublishAuthModes(defaultPublishAuthModes: IResolvable)

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      public fun defaultPublishAuthModes(defaultPublishAuthModes: List<Any>)

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      public fun defaultPublishAuthModes(vararg defaultPublishAuthModes: Any)

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      public fun defaultSubscribeAuthModes(defaultSubscribeAuthModes: IResolvable)

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      public fun defaultSubscribeAuthModes(defaultSubscribeAuthModes: List<Any>)

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      public fun defaultSubscribeAuthModes(vararg defaultSubscribeAuthModes: Any)

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      public fun logConfig(logConfig: IResolvable)

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      public fun logConfig(logConfig: EventLogConfigProperty)

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93c15d9d10dfce107f3b6019ec5c40e9bec267db0987a1737ca7b7e1ee94a994")
      public fun logConfig(logConfig: EventLogConfigProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty.builder()

      /**
       * @param authProviders A list of authorization providers. 
       */
      override fun authProviders(authProviders: IResolvable) {
        cdkBuilder.authProviders(authProviders.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param authProviders A list of authorization providers. 
       */
      override fun authProviders(authProviders: List<Any>) {
        cdkBuilder.authProviders(authProviders.map{CdkObjectWrappers.unwrap(it)})
      }

      /**
       * @param authProviders A list of authorization providers. 
       */
      override fun authProviders(vararg authProviders: Any): Unit =
          authProviders(authProviders.toList())

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      override fun connectionAuthModes(connectionAuthModes: IResolvable) {
        cdkBuilder.connectionAuthModes(connectionAuthModes.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      override fun connectionAuthModes(connectionAuthModes: List<Any>) {
        cdkBuilder.connectionAuthModes(connectionAuthModes.map{CdkObjectWrappers.unwrap(it)})
      }

      /**
       * @param connectionAuthModes A list of valid authorization modes for the Event API
       * connections. 
       */
      override fun connectionAuthModes(vararg connectionAuthModes: Any): Unit =
          connectionAuthModes(connectionAuthModes.toList())

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      override fun defaultPublishAuthModes(defaultPublishAuthModes: IResolvable) {
        cdkBuilder.defaultPublishAuthModes(defaultPublishAuthModes.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      override fun defaultPublishAuthModes(defaultPublishAuthModes: List<Any>) {
        cdkBuilder.defaultPublishAuthModes(defaultPublishAuthModes.map{CdkObjectWrappers.unwrap(it)})
      }

      /**
       * @param defaultPublishAuthModes A list of valid authorization modes for the Event API
       * publishing. 
       */
      override fun defaultPublishAuthModes(vararg defaultPublishAuthModes: Any): Unit =
          defaultPublishAuthModes(defaultPublishAuthModes.toList())

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      override fun defaultSubscribeAuthModes(defaultSubscribeAuthModes: IResolvable) {
        cdkBuilder.defaultSubscribeAuthModes(defaultSubscribeAuthModes.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      override fun defaultSubscribeAuthModes(defaultSubscribeAuthModes: List<Any>) {
        cdkBuilder.defaultSubscribeAuthModes(defaultSubscribeAuthModes.map{CdkObjectWrappers.unwrap(it)})
      }

      /**
       * @param defaultSubscribeAuthModes A list of valid authorization modes for the Event API
       * subscriptions. 
       */
      override fun defaultSubscribeAuthModes(vararg defaultSubscribeAuthModes: Any): Unit =
          defaultSubscribeAuthModes(defaultSubscribeAuthModes.toList())

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      override fun logConfig(logConfig: IResolvable) {
        cdkBuilder.logConfig(logConfig.let(IResolvable.Companion::unwrap))
      }

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      override fun logConfig(logConfig: EventLogConfigProperty) {
        cdkBuilder.logConfig(logConfig.let(EventLogConfigProperty.Companion::unwrap))
      }

      /**
       * @param logConfig The CloudWatch Logs configuration for the Event API.
       */
      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93c15d9d10dfce107f3b6019ec5c40e9bec267db0987a1737ca7b7e1ee94a994")
      override fun logConfig(logConfig: EventLogConfigProperty.Builder.() -> Unit): Unit =
          logConfig(EventLogConfigProperty(logConfig))

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty,
    ) : CdkObject(cdkObject),
        EventConfigProperty {
      /**
       * A list of authorization providers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-authproviders)
       */
      override fun authProviders(): Any = unwrap(this).getAuthProviders()

      /**
       * A list of valid authorization modes for the Event API connections.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-connectionauthmodes)
       */
      override fun connectionAuthModes(): Any = unwrap(this).getConnectionAuthModes()

      /**
       * A list of valid authorization modes for the Event API publishing.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-defaultpublishauthmodes)
       */
      override fun defaultPublishAuthModes(): Any = unwrap(this).getDefaultPublishAuthModes()

      /**
       * A list of valid authorization modes for the Event API subscriptions.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-defaultsubscribeauthmodes)
       */
      override fun defaultSubscribeAuthModes(): Any = unwrap(this).getDefaultSubscribeAuthModes()

      /**
       * The CloudWatch Logs configuration for the Event API.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventconfig.html#cfn-appsync-api-eventconfig-logconfig)
       */
      override fun logConfig(): Any? = unwrap(this).getLogConfig()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): EventConfigProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty):
          EventConfigProperty = CdkObjectWrappers.wrap(cdkObject) as? EventConfigProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: EventConfigProperty):
          software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty = (wrapped as
          CdkObject).cdkObject as software.amazon.awscdk.services.appsync.CfnApi.EventConfigProperty
    }
  }

  /**
   * Describes the CloudWatch Logs configuration for the Event API.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * EventLogConfigProperty eventLogConfigProperty = EventLogConfigProperty.builder()
   * .cloudWatchLogsRoleArn("cloudWatchLogsRoleArn")
   * .logLevel("logLevel")
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventlogconfig.html)
   */
  public interface EventLogConfigProperty {
    /**
     * The IAM service role that AWS AppSync assumes to publish CloudWatch Logs in your account.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventlogconfig.html#cfn-appsync-api-eventlogconfig-cloudwatchlogsrolearn)
     */
    public fun cloudWatchLogsRoleArn(): String

    /**
     * The type of information to log for the Event API.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventlogconfig.html#cfn-appsync-api-eventlogconfig-loglevel)
     */
    public fun logLevel(): String

    /**
     * A builder for [EventLogConfigProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cloudWatchLogsRoleArn The IAM service role that AWS AppSync assumes to publish
       * CloudWatch Logs in your account. 
       */
      public fun cloudWatchLogsRoleArn(cloudWatchLogsRoleArn: String)

      /**
       * @param logLevel The type of information to log for the Event API. 
       */
      public fun logLevel(logLevel: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty.builder()

      /**
       * @param cloudWatchLogsRoleArn The IAM service role that AWS AppSync assumes to publish
       * CloudWatch Logs in your account. 
       */
      override fun cloudWatchLogsRoleArn(cloudWatchLogsRoleArn: String) {
        cdkBuilder.cloudWatchLogsRoleArn(cloudWatchLogsRoleArn)
      }

      /**
       * @param logLevel The type of information to log for the Event API. 
       */
      override fun logLevel(logLevel: String) {
        cdkBuilder.logLevel(logLevel)
      }

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty,
    ) : CdkObject(cdkObject),
        EventLogConfigProperty {
      /**
       * The IAM service role that AWS AppSync assumes to publish CloudWatch Logs in your account.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventlogconfig.html#cfn-appsync-api-eventlogconfig-cloudwatchlogsrolearn)
       */
      override fun cloudWatchLogsRoleArn(): String = unwrap(this).getCloudWatchLogsRoleArn()

      /**
       * The type of information to log for the Event API.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-eventlogconfig.html#cfn-appsync-api-eventlogconfig-loglevel)
       */
      override fun logLevel(): String = unwrap(this).getLogLevel()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): EventLogConfigProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty):
          EventLogConfigProperty = CdkObjectWrappers.wrap(cdkObject) as? EventLogConfigProperty ?:
          Wrapper(cdkObject)

      internal fun unwrap(wrapped: EventLogConfigProperty):
          software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.appsync.CfnApi.EventLogConfigProperty
    }
  }

  /**
   * A `LambdaAuthorizerConfig` specifies how to authorize AWS AppSync API access when using the
   * `AWS_LAMBDA` authorizer mode.
   *
   * Be aware that an AWS AppSync API can have only one AWS Lambda authorizer configured at a time.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * LambdaAuthorizerConfigProperty lambdaAuthorizerConfigProperty =
   * LambdaAuthorizerConfigProperty.builder()
   * .authorizerUri("authorizerUri")
   * // the properties below are optional
   * .authorizerResultTtlInSeconds(123)
   * .identityValidationExpression("identityValidationExpression")
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html)
   */
  public interface LambdaAuthorizerConfigProperty {
    /**
     * The number of seconds a response should be cached for.
     *
     * The default is 0 seconds, which disables caching. If you don't specify a value for
     * `authorizerResultTtlInSeconds` , the default value is used. The maximum value is one hour (3600
     * seconds). The Lambda function can override this by returning a `ttlOverride` key in its
     * response.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-authorizerresultttlinseconds)
     */
    public fun authorizerResultTtlInSeconds(): Number? =
        unwrap(this).getAuthorizerResultTtlInSeconds()

    /**
     * The Amazon Resource Name (ARN) of the Lambda function to be called for authorization.
     *
     * This can be a standard Lambda ARN, a version ARN ( `.../v3` ), or an alias ARN.
     *
     * *Note* : This Lambda function must have the following resource-based policy assigned to it.
     * When configuring Lambda authorizers in the console, this is done for you. To use the AWS Command
     * Line Interface ( AWS CLI ), run the following:
     *
     * `aws lambda add-permission --function-name
     * "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id
     * "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-authorizeruri)
     */
    public fun authorizerUri(): String

    /**
     * A regular expression for validation of tokens before the Lambda function is called.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-identityvalidationexpression)
     */
    public fun identityValidationExpression(): String? =
        unwrap(this).getIdentityValidationExpression()

    /**
     * A builder for [LambdaAuthorizerConfigProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param authorizerResultTtlInSeconds The number of seconds a response should be cached for.
       * The default is 0 seconds, which disables caching. If you don't specify a value for
       * `authorizerResultTtlInSeconds` , the default value is used. The maximum value is one hour
       * (3600 seconds). The Lambda function can override this by returning a `ttlOverride` key in its
       * response.
       */
      public fun authorizerResultTtlInSeconds(authorizerResultTtlInSeconds: Number)

      /**
       * @param authorizerUri The Amazon Resource Name (ARN) of the Lambda function to be called for
       * authorization. 
       * This can be a standard Lambda ARN, a version ARN ( `.../v3` ), or an alias ARN.
       *
       * *Note* : This Lambda function must have the following resource-based policy assigned to it.
       * When configuring Lambda authorizers in the console, this is done for you. To use the AWS
       * Command Line Interface ( AWS CLI ), run the following:
       *
       * `aws lambda add-permission --function-name
       * "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id
       * "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction`
       */
      public fun authorizerUri(authorizerUri: String)

      /**
       * @param identityValidationExpression A regular expression for validation of tokens before
       * the Lambda function is called.
       */
      public fun identityValidationExpression(identityValidationExpression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty.builder()

      /**
       * @param authorizerResultTtlInSeconds The number of seconds a response should be cached for.
       * The default is 0 seconds, which disables caching. If you don't specify a value for
       * `authorizerResultTtlInSeconds` , the default value is used. The maximum value is one hour
       * (3600 seconds). The Lambda function can override this by returning a `ttlOverride` key in its
       * response.
       */
      override fun authorizerResultTtlInSeconds(authorizerResultTtlInSeconds: Number) {
        cdkBuilder.authorizerResultTtlInSeconds(authorizerResultTtlInSeconds)
      }

      /**
       * @param authorizerUri The Amazon Resource Name (ARN) of the Lambda function to be called for
       * authorization. 
       * This can be a standard Lambda ARN, a version ARN ( `.../v3` ), or an alias ARN.
       *
       * *Note* : This Lambda function must have the following resource-based policy assigned to it.
       * When configuring Lambda authorizers in the console, this is done for you. To use the AWS
       * Command Line Interface ( AWS CLI ), run the following:
       *
       * `aws lambda add-permission --function-name
       * "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id
       * "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction`
       */
      override fun authorizerUri(authorizerUri: String) {
        cdkBuilder.authorizerUri(authorizerUri)
      }

      /**
       * @param identityValidationExpression A regular expression for validation of tokens before
       * the Lambda function is called.
       */
      override fun identityValidationExpression(identityValidationExpression: String) {
        cdkBuilder.identityValidationExpression(identityValidationExpression)
      }

      public fun build():
          software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty,
    ) : CdkObject(cdkObject),
        LambdaAuthorizerConfigProperty {
      /**
       * The number of seconds a response should be cached for.
       *
       * The default is 0 seconds, which disables caching. If you don't specify a value for
       * `authorizerResultTtlInSeconds` , the default value is used. The maximum value is one hour
       * (3600 seconds). The Lambda function can override this by returning a `ttlOverride` key in its
       * response.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-authorizerresultttlinseconds)
       */
      override fun authorizerResultTtlInSeconds(): Number? =
          unwrap(this).getAuthorizerResultTtlInSeconds()

      /**
       * The Amazon Resource Name (ARN) of the Lambda function to be called for authorization.
       *
       * This can be a standard Lambda ARN, a version ARN ( `.../v3` ), or an alias ARN.
       *
       * *Note* : This Lambda function must have the following resource-based policy assigned to it.
       * When configuring Lambda authorizers in the console, this is done for you. To use the AWS
       * Command Line Interface ( AWS CLI ), run the following:
       *
       * `aws lambda add-permission --function-name
       * "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id
       * "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-authorizeruri)
       */
      override fun authorizerUri(): String = unwrap(this).getAuthorizerUri()

      /**
       * A regular expression for validation of tokens before the Lambda function is called.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-lambdaauthorizerconfig.html#cfn-appsync-api-lambdaauthorizerconfig-identityvalidationexpression)
       */
      override fun identityValidationExpression(): String? =
          unwrap(this).getIdentityValidationExpression()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LambdaAuthorizerConfigProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty):
          LambdaAuthorizerConfigProperty = CdkObjectWrappers.wrap(cdkObject) as?
          LambdaAuthorizerConfigProperty ?: Wrapper(cdkObject)

      internal fun unwrap(wrapped: LambdaAuthorizerConfigProperty):
          software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.appsync.CfnApi.LambdaAuthorizerConfigProperty
    }
  }

  /**
   * Describes an OpenID Connect (OIDC) configuration.
   *
   * Example:
   *
   * ```
   * // The code below shows an example of how to instantiate this type.
   * // The values are placeholders you should change.
   * import io.cloudshiftdev.awscdk.services.appsync.*;
   * OpenIDConnectConfigProperty openIDConnectConfigProperty = OpenIDConnectConfigProperty.builder()
   * .issuer("issuer")
   * // the properties below are optional
   * .authTtl(123)
   * .clientId("clientId")
   * .iatTtl(123)
   * .build();
   * ```
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html)
   */
  public interface OpenIDConnectConfigProperty {
    /**
     * The number of milliseconds that a token is valid after being authenticated.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-authttl)
     */
    public fun authTtl(): Number? = unwrap(this).getAuthTtl()

    /**
     * The client identifier of the relying party at the OpenID identity provider.
     *
     * This identifier is typically obtained when the relying party is registered with the OpenID
     * identity provider. You can specify a regular expression so that AWS AppSync can validate against
     * multiple client identifiers at a time.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-clientid)
     */
    public fun clientId(): String? = unwrap(this).getClientId()

    /**
     * The number of milliseconds that a token is valid after it's issued to a user.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-iatttl)
     */
    public fun iatTtl(): Number? = unwrap(this).getIatTtl()

    /**
     * The issuer for the OIDC configuration.
     *
     * The issuer returned by discovery must exactly match the value of `iss` in the ID token.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-issuer)
     */
    public fun issuer(): String

    /**
     * A builder for [OpenIDConnectConfigProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param authTtl The number of milliseconds that a token is valid after being authenticated.
       */
      public fun authTtl(authTtl: Number)

      /**
       * @param clientId The client identifier of the relying party at the OpenID identity provider.
       * This identifier is typically obtained when the relying party is registered with the OpenID
       * identity provider. You can specify a regular expression so that AWS AppSync can validate
       * against multiple client identifiers at a time.
       */
      public fun clientId(clientId: String)

      /**
       * @param iatTtl The number of milliseconds that a token is valid after it's issued to a user.
       */
      public fun iatTtl(iatTtl: Number)

      /**
       * @param issuer The issuer for the OIDC configuration. 
       * The issuer returned by discovery must exactly match the value of `iss` in the ID token.
       */
      public fun issuer(issuer: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty.Builder =
          software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty.builder()

      /**
       * @param authTtl The number of milliseconds that a token is valid after being authenticated.
       */
      override fun authTtl(authTtl: Number) {
        cdkBuilder.authTtl(authTtl)
      }

      /**
       * @param clientId The client identifier of the relying party at the OpenID identity provider.
       * This identifier is typically obtained when the relying party is registered with the OpenID
       * identity provider. You can specify a regular expression so that AWS AppSync can validate
       * against multiple client identifiers at a time.
       */
      override fun clientId(clientId: String) {
        cdkBuilder.clientId(clientId)
      }

      /**
       * @param iatTtl The number of milliseconds that a token is valid after it's issued to a user.
       */
      override fun iatTtl(iatTtl: Number) {
        cdkBuilder.iatTtl(iatTtl)
      }

      /**
       * @param issuer The issuer for the OIDC configuration. 
       * The issuer returned by discovery must exactly match the value of `iss` in the ID token.
       */
      override fun issuer(issuer: String) {
        cdkBuilder.issuer(issuer)
      }

      public fun build(): software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      cdkObject: software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty,
    ) : CdkObject(cdkObject),
        OpenIDConnectConfigProperty {
      /**
       * The number of milliseconds that a token is valid after being authenticated.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-authttl)
       */
      override fun authTtl(): Number? = unwrap(this).getAuthTtl()

      /**
       * The client identifier of the relying party at the OpenID identity provider.
       *
       * This identifier is typically obtained when the relying party is registered with the OpenID
       * identity provider. You can specify a regular expression so that AWS AppSync can validate
       * against multiple client identifiers at a time.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-clientid)
       */
      override fun clientId(): String? = unwrap(this).getClientId()

      /**
       * The number of milliseconds that a token is valid after it's issued to a user.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-iatttl)
       */
      override fun iatTtl(): Number? = unwrap(this).getIatTtl()

      /**
       * The issuer for the OIDC configuration.
       *
       * The issuer returned by discovery must exactly match the value of `iss` in the ID token.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-api-openidconnectconfig.html#cfn-appsync-api-openidconnectconfig-issuer)
       */
      override fun issuer(): String = unwrap(this).getIssuer()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): OpenIDConnectConfigProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty):
          OpenIDConnectConfigProperty = CdkObjectWrappers.wrap(cdkObject) as?
          OpenIDConnectConfigProperty ?: Wrapper(cdkObject)

      internal fun unwrap(wrapped: OpenIDConnectConfigProperty):
          software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.appsync.CfnApi.OpenIDConnectConfigProperty
    }
  }
}
