@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.kinesisfirehose

import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import io.cloudshiftdev.awscdk.services.iam.IRole
import kotlin.String
import kotlin.Unit

/**
 * Properties for a new delivery stream.
 *
 * Example:
 *
 * ```
 * Bucket bucket;
 * // Provide a Lambda function that will transform records before delivery, with custom
 * // buffering and retry configuration
 * Function lambdaFunction = Function.Builder.create(this, "Processor")
 * .runtime(Runtime.NODEJS_LATEST)
 * .handler("index.handler")
 * .code(Code.fromAsset(join(__dirname, "process-records")))
 * .build();
 * LambdaFunctionProcessor lambdaProcessor = LambdaFunctionProcessor.Builder.create(lambdaFunction)
 * .bufferInterval(Duration.minutes(5))
 * .bufferSize(Size.mebibytes(5))
 * .retries(5)
 * .build();
 * S3Bucket s3Destination = S3Bucket.Builder.create(bucket)
 * .processor(lambdaProcessor)
 * .build();
 * DeliveryStream.Builder.create(this, "Delivery Stream")
 * .destination(s3Destination)
 * .build();
 * ```
 */
public interface DeliveryStreamProps {
  /**
   * A name for the delivery stream.
   *
   * Default: - a name is generated by CloudFormation.
   */
  public fun deliveryStreamName(): String? = unwrap(this).getDeliveryStreamName()

  /**
   * The destination that this delivery stream will deliver data to.
   */
  public fun destination(): IDestination

  /**
   * Indicates the type of customer master key (CMK) to use for server-side encryption, if any.
   *
   * Default: StreamEncryption.unencrypted()
   */
  public fun encryption(): StreamEncryption? =
      unwrap(this).getEncryption()?.let(StreamEncryption::wrap)

  /**
   * The IAM role associated with this delivery stream.
   *
   * Assumed by Amazon Data Firehose to read from sources and encrypt data server-side.
   *
   * Default: - a role will be created with default permissions.
   */
  public fun role(): IRole? = unwrap(this).getRole()?.let(IRole::wrap)

  /**
   * The Kinesis data stream to use as a source for this delivery stream.
   *
   * Default: - data must be written to the delivery stream via a direct put.
   */
  public fun source(): ISource? = unwrap(this).getSource()?.let(ISource::wrap)

  /**
   * A builder for [DeliveryStreamProps]
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * @param deliveryStreamName A name for the delivery stream.
     */
    public fun deliveryStreamName(deliveryStreamName: String)

    /**
     * @param destination The destination that this delivery stream will deliver data to. 
     */
    public fun destination(destination: IDestination)

    /**
     * @param encryption Indicates the type of customer master key (CMK) to use for server-side
     * encryption, if any.
     */
    public fun encryption(encryption: StreamEncryption)

    /**
     * @param role The IAM role associated with this delivery stream.
     * Assumed by Amazon Data Firehose to read from sources and encrypt data server-side.
     */
    public fun role(role: IRole)

    /**
     * @param source The Kinesis data stream to use as a source for this delivery stream.
     */
    public fun source(source: ISource)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder:
        software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps.Builder =
        software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps.builder()

    /**
     * @param deliveryStreamName A name for the delivery stream.
     */
    override fun deliveryStreamName(deliveryStreamName: String) {
      cdkBuilder.deliveryStreamName(deliveryStreamName)
    }

    /**
     * @param destination The destination that this delivery stream will deliver data to. 
     */
    override fun destination(destination: IDestination) {
      cdkBuilder.destination(destination.let(IDestination.Companion::unwrap))
    }

    /**
     * @param encryption Indicates the type of customer master key (CMK) to use for server-side
     * encryption, if any.
     */
    override fun encryption(encryption: StreamEncryption) {
      cdkBuilder.encryption(encryption.let(StreamEncryption.Companion::unwrap))
    }

    /**
     * @param role The IAM role associated with this delivery stream.
     * Assumed by Amazon Data Firehose to read from sources and encrypt data server-side.
     */
    override fun role(role: IRole) {
      cdkBuilder.role(role.let(IRole.Companion::unwrap))
    }

    /**
     * @param source The Kinesis data stream to use as a source for this delivery stream.
     */
    override fun source(source: ISource) {
      cdkBuilder.source(source.let(ISource.Companion::unwrap))
    }

    public fun build(): software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps =
        cdkBuilder.build()
  }

  private class Wrapper(
    cdkObject: software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps,
  ) : CdkObject(cdkObject),
      DeliveryStreamProps {
    /**
     * A name for the delivery stream.
     *
     * Default: - a name is generated by CloudFormation.
     */
    override fun deliveryStreamName(): String? = unwrap(this).getDeliveryStreamName()

    /**
     * The destination that this delivery stream will deliver data to.
     */
    override fun destination(): IDestination = unwrap(this).getDestination().let(IDestination::wrap)

    /**
     * Indicates the type of customer master key (CMK) to use for server-side encryption, if any.
     *
     * Default: StreamEncryption.unencrypted()
     */
    override fun encryption(): StreamEncryption? =
        unwrap(this).getEncryption()?.let(StreamEncryption::wrap)

    /**
     * The IAM role associated with this delivery stream.
     *
     * Assumed by Amazon Data Firehose to read from sources and encrypt data server-side.
     *
     * Default: - a role will be created with default permissions.
     */
    override fun role(): IRole? = unwrap(this).getRole()?.let(IRole::wrap)

    /**
     * The Kinesis data stream to use as a source for this delivery stream.
     *
     * Default: - data must be written to the delivery stream via a direct put.
     */
    override fun source(): ISource? = unwrap(this).getSource()?.let(ISource::wrap)
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): DeliveryStreamProps {
      val builderImpl = BuilderImpl()
      return Wrapper(builderImpl.apply(block).build())
    }

    internal
        fun wrap(cdkObject: software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps):
        DeliveryStreamProps = CdkObjectWrappers.wrap(cdkObject) as? DeliveryStreamProps ?:
        Wrapper(cdkObject)

    internal fun unwrap(wrapped: DeliveryStreamProps):
        software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps = (wrapped as
        CdkObject).cdkObject as software.amazon.awscdk.services.kinesisfirehose.DeliveryStreamProps
  }
}
