@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.neptunegraph

import io.cloudshiftdev.awscdk.CfnResource
import io.cloudshiftdev.awscdk.IInspectable
import io.cloudshiftdev.awscdk.TreeInspector
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import io.cloudshiftdev.constructs.Construct as CloudshiftdevConstructsConstruct
import software.constructs.Construct as SoftwareConstructsConstruct

/**
 * Create a private graph endpoint to allow private access from to the graph from within a VPC.
 *
 * You can attach security groups to the private graph endpoint.
 *
 *
 * VPC endpoint charges apply.
 *
 *
 * Example:
 *
 * ```
 * // The code below shows an example of how to instantiate this type.
 * // The values are placeholders you should change.
 * import io.cloudshiftdev.awscdk.services.neptunegraph.*;
 * CfnPrivateGraphEndpoint cfnPrivateGraphEndpoint = CfnPrivateGraphEndpoint.Builder.create(this,
 * "MyCfnPrivateGraphEndpoint")
 * .graphIdentifier("graphIdentifier")
 * .vpcId("vpcId")
 * // the properties below are optional
 * .securityGroupIds(List.of("securityGroupIds"))
 * .subnetIds(List.of("subnetIds"))
 * .build();
 * ```
 *
 * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html)
 */
public open class CfnPrivateGraphEndpoint(
  cdkObject: software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint,
) : CfnResource(cdkObject), IInspectable {
  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: CfnPrivateGraphEndpointProps,
  ) :
      this(software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint(scope.let(CloudshiftdevConstructsConstruct.Companion::unwrap),
      id, props.let(CfnPrivateGraphEndpointProps.Companion::unwrap))
  )

  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: CfnPrivateGraphEndpointProps.Builder.() -> Unit,
  ) : this(scope, id, CfnPrivateGraphEndpointProps(props)
  )

  /**
   * PrivateGraphEndpoint resource identifier generated by concatenating the associated
   * GraphIdentifier and VpcId with an underscore separator.
   *
   * For example, if GraphIdentifier is `g-12a3bcdef4` and VpcId is `vpc-111122223333aabbc` , the
   * generated PrivateGraphEndpointIdentifier will be `g-12a3bcdef4_vpc-111122223333aabbc` .
   */
  public open fun attrPrivateGraphEndpointIdentifier(): String =
      unwrap(this).getAttrPrivateGraphEndpointIdentifier()

  /**
   * VPC endpoint that provides a private connection between the Graph and specified VPC.
   *
   * For example: `vpce-aabbaabbaabbaabba` .
   */
  public open fun attrVpcEndpointId(): String = unwrap(this).getAttrVpcEndpointId()

  /**
   * The unique identifier of the Neptune Analytics graph.
   */
  public open fun graphIdentifier(): String = unwrap(this).getGraphIdentifier()

  /**
   * The unique identifier of the Neptune Analytics graph.
   */
  public open fun graphIdentifier(`value`: String) {
    unwrap(this).setGraphIdentifier(`value`)
  }

  /**
   * Examines the CloudFormation resource and discloses attributes.
   *
   * @param inspector tree inspector to collect and process attributes. 
   */
  public override fun inspect(inspector: TreeInspector) {
    unwrap(this).inspect(inspector.let(TreeInspector.Companion::unwrap))
  }

  /**
   * Security groups to be attached to the private graph endpoint..
   */
  public open fun securityGroupIds(): List<String> = unwrap(this).getSecurityGroupIds() ?:
      emptyList()

  /**
   * Security groups to be attached to the private graph endpoint..
   */
  public open fun securityGroupIds(`value`: List<String>) {
    unwrap(this).setSecurityGroupIds(`value`)
  }

  /**
   * Security groups to be attached to the private graph endpoint..
   */
  public open fun securityGroupIds(vararg `value`: String): Unit =
      securityGroupIds(`value`.toList())

  /**
   * Subnets in which private graph endpoint ENIs are created.
   */
  public open fun subnetIds(): List<String> = unwrap(this).getSubnetIds() ?: emptyList()

  /**
   * Subnets in which private graph endpoint ENIs are created.
   */
  public open fun subnetIds(`value`: List<String>) {
    unwrap(this).setSubnetIds(`value`)
  }

  /**
   * Subnets in which private graph endpoint ENIs are created.
   */
  public open fun subnetIds(vararg `value`: String): Unit = subnetIds(`value`.toList())

  /**
   * The VPC in which the private graph endpoint needs to be created.
   */
  public open fun vpcId(): String = unwrap(this).getVpcId()

  /**
   * The VPC in which the private graph endpoint needs to be created.
   */
  public open fun vpcId(`value`: String) {
    unwrap(this).setVpcId(`value`)
  }

  /**
   * A fluent builder for [io.cloudshiftdev.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint].
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * The unique identifier of the Neptune Analytics graph.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-graphidentifier)
     * @param graphIdentifier The unique identifier of the Neptune Analytics graph. 
     */
    public fun graphIdentifier(graphIdentifier: String)

    /**
     * Security groups to be attached to the private graph endpoint..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-securitygroupids)
     * @param securityGroupIds Security groups to be attached to the private graph endpoint.. 
     */
    public fun securityGroupIds(securityGroupIds: List<String>)

    /**
     * Security groups to be attached to the private graph endpoint..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-securitygroupids)
     * @param securityGroupIds Security groups to be attached to the private graph endpoint.. 
     */
    public fun securityGroupIds(vararg securityGroupIds: String)

    /**
     * Subnets in which private graph endpoint ENIs are created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-subnetids)
     * @param subnetIds Subnets in which private graph endpoint ENIs are created. 
     */
    public fun subnetIds(subnetIds: List<String>)

    /**
     * Subnets in which private graph endpoint ENIs are created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-subnetids)
     * @param subnetIds Subnets in which private graph endpoint ENIs are created. 
     */
    public fun subnetIds(vararg subnetIds: String)

    /**
     * The VPC in which the private graph endpoint needs to be created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-vpcid)
     * @param vpcId The VPC in which the private graph endpoint needs to be created. 
     */
    public fun vpcId(vpcId: String)
  }

  private class BuilderImpl(
    scope: SoftwareConstructsConstruct,
    id: String,
  ) : Builder {
    private val cdkBuilder:
        software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint.Builder =
        software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint.Builder.create(scope,
        id)

    /**
     * The unique identifier of the Neptune Analytics graph.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-graphidentifier)
     * @param graphIdentifier The unique identifier of the Neptune Analytics graph. 
     */
    override fun graphIdentifier(graphIdentifier: String) {
      cdkBuilder.graphIdentifier(graphIdentifier)
    }

    /**
     * Security groups to be attached to the private graph endpoint..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-securitygroupids)
     * @param securityGroupIds Security groups to be attached to the private graph endpoint.. 
     */
    override fun securityGroupIds(securityGroupIds: List<String>) {
      cdkBuilder.securityGroupIds(securityGroupIds)
    }

    /**
     * Security groups to be attached to the private graph endpoint..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-securitygroupids)
     * @param securityGroupIds Security groups to be attached to the private graph endpoint.. 
     */
    override fun securityGroupIds(vararg securityGroupIds: String): Unit =
        securityGroupIds(securityGroupIds.toList())

    /**
     * Subnets in which private graph endpoint ENIs are created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-subnetids)
     * @param subnetIds Subnets in which private graph endpoint ENIs are created. 
     */
    override fun subnetIds(subnetIds: List<String>) {
      cdkBuilder.subnetIds(subnetIds)
    }

    /**
     * Subnets in which private graph endpoint ENIs are created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-subnetids)
     * @param subnetIds Subnets in which private graph endpoint ENIs are created. 
     */
    override fun subnetIds(vararg subnetIds: String): Unit = subnetIds(subnetIds.toList())

    /**
     * The VPC in which the private graph endpoint needs to be created.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptunegraph-privategraphendpoint.html#cfn-neptunegraph-privategraphendpoint-vpcid)
     * @param vpcId The VPC in which the private graph endpoint needs to be created. 
     */
    override fun vpcId(vpcId: String) {
      cdkBuilder.vpcId(vpcId)
    }

    public fun build(): software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint =
        cdkBuilder.build()
  }

  public companion object {
    public val CFN_RESOURCE_TYPE_NAME: String =
        software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint.CFN_RESOURCE_TYPE_NAME

    public operator fun invoke(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      block: Builder.() -> Unit = {},
    ): CfnPrivateGraphEndpoint {
      val builderImpl = BuilderImpl(CloudshiftdevConstructsConstruct.unwrap(scope), id)
      return CfnPrivateGraphEndpoint(builderImpl.apply(block).build())
    }

    internal
        fun wrap(cdkObject: software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint):
        CfnPrivateGraphEndpoint = CfnPrivateGraphEndpoint(cdkObject)

    internal fun unwrap(wrapped: CfnPrivateGraphEndpoint):
        software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint = wrapped.cdkObject as
        software.amazon.awscdk.services.neptunegraph.CfnPrivateGraphEndpoint
  }
}
