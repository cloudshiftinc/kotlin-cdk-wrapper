@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.iam

import io.cloudshiftdev.awscdk.CfnTag
import io.cloudshiftdev.awscdk.IResolvable
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

/**
 * Properties for defining a `CfnSAMLProvider`.
 *
 * Example:
 *
 * ```
 * // The code below shows an example of how to instantiate this type.
 * // The values are placeholders you should change.
 * import io.cloudshiftdev.awscdk.services.iam.*;
 * CfnSAMLProviderProps cfnSAMLProviderProps = CfnSAMLProviderProps.builder()
 * .addPrivateKey("addPrivateKey")
 * .assertionEncryptionMode("assertionEncryptionMode")
 * .name("name")
 * .privateKeyList(List.of(SAMLPrivateKeyProperty.builder()
 * .keyId("keyId")
 * .timestamp("timestamp")
 * .build()))
 * .removePrivateKey("removePrivateKey")
 * .samlMetadataDocument("samlMetadataDocument")
 * .tags(List.of(CfnTag.builder()
 * .key("key")
 * .value("value")
 * .build()))
 * .build();
 * ```
 *
 * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html)
 */
public interface CfnSAMLProviderProps {
  /**
   * Specifies the new private key from your external identity provider.
   *
   * The private key must be a .pem file that uses AES-GCM or AES-CBC encryption algorithm to
   * decrypt SAML assertions.
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-addprivatekey)
   */
  public fun addPrivateKey(): String? = unwrap(this).getAddPrivateKey()

  /**
   * Specifies the encryption setting for the SAML provider.
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-assertionencryptionmode)
   */
  public fun assertionEncryptionMode(): String? = unwrap(this).getAssertionEncryptionMode()

  /**
   * The name of the provider to create.
   *
   * This parameter allows (through its [regex
   * pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters
   * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any
   * of the following characters: _+=,.&#64;-
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-name)
   */
  public fun name(): String? = unwrap(this).getName()

  /**
   * The private key metadata for the SAML provider.
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-privatekeylist)
   */
  public fun privateKeyList(): Any? = unwrap(this).getPrivateKeyList()

  /**
   * The Key ID of the private key to remove.
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-removeprivatekey)
   */
  public fun removePrivateKey(): String? = unwrap(this).getRemovePrivateKey()

  /**
   * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document
   * includes the issuer's name, expiration information, and keys that can be used to validate the SAML
   * authentication response (assertions) that are received from the IdP. You must generate the
   * metadata document using the identity management software that is used as your organization's IdP.
   *
   * For more information, see [About SAML 2.0-based
   * federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in the
   * *IAM User Guide*
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-samlmetadatadocument)
   */
  public fun samlMetadataDocument(): String? = unwrap(this).getSamlMetadataDocument()

  /**
   * A list of tags that you want to attach to the new IAM SAML provider.
   *
   * Each tag consists of a key name and an associated value. For more information about tagging,
   * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the
   * *IAM User Guide* .
   *
   *
   * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the
   * entire request fails and the resource is not created.
   *
   *
   * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-tags)
   */
  public fun tags(): List<CfnTag> = unwrap(this).getTags()?.map(CfnTag::wrap) ?: emptyList()

  /**
   * A builder for [CfnSAMLProviderProps]
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * @param addPrivateKey Specifies the new private key from your external identity provider.
     * The private key must be a .pem file that uses AES-GCM or AES-CBC encryption algorithm to
     * decrypt SAML assertions.
     */
    public fun addPrivateKey(addPrivateKey: String)

    /**
     * @param assertionEncryptionMode Specifies the encryption setting for the SAML provider.
     */
    public fun assertionEncryptionMode(assertionEncryptionMode: String)

    /**
     * @param name The name of the provider to create.
     * This parameter allows (through its [regex
     * pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters
     * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include
     * any of the following characters: _+=,.&#64;-
     */
    public fun name(name: String)

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    public fun privateKeyList(privateKeyList: IResolvable)

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    public fun privateKeyList(privateKeyList: List<Any>)

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    public fun privateKeyList(vararg privateKeyList: Any)

    /**
     * @param removePrivateKey The Key ID of the private key to remove.
     */
    public fun removePrivateKey(removePrivateKey: String)

    /**
     * @param samlMetadataDocument An XML document generated by an identity provider (IdP) that
     * supports SAML 2.0. The document includes the issuer's name, expiration information, and keys
     * that can be used to validate the SAML authentication response (assertions) that are received
     * from the IdP. You must generate the metadata document using the identity management software
     * that is used as your organization's IdP.
     * For more information, see [About SAML 2.0-based
     * federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in
     * the *IAM User Guide*
     */
    public fun samlMetadataDocument(samlMetadataDocument: String)

    /**
     * @param tags A list of tags that you want to attach to the new IAM SAML provider.
     * Each tag consists of a key name and an associated value. For more information about tagging,
     * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in
     * the *IAM User Guide* .
     *
     *
     * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then
     * the entire request fails and the resource is not created.
     */
    public fun tags(tags: List<CfnTag>)

    /**
     * @param tags A list of tags that you want to attach to the new IAM SAML provider.
     * Each tag consists of a key name and an associated value. For more information about tagging,
     * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in
     * the *IAM User Guide* .
     *
     *
     * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then
     * the entire request fails and the resource is not created.
     */
    public fun tags(vararg tags: CfnTag)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.iam.CfnSAMLProviderProps.Builder =
        software.amazon.awscdk.services.iam.CfnSAMLProviderProps.builder()

    /**
     * @param addPrivateKey Specifies the new private key from your external identity provider.
     * The private key must be a .pem file that uses AES-GCM or AES-CBC encryption algorithm to
     * decrypt SAML assertions.
     */
    override fun addPrivateKey(addPrivateKey: String) {
      cdkBuilder.addPrivateKey(addPrivateKey)
    }

    /**
     * @param assertionEncryptionMode Specifies the encryption setting for the SAML provider.
     */
    override fun assertionEncryptionMode(assertionEncryptionMode: String) {
      cdkBuilder.assertionEncryptionMode(assertionEncryptionMode)
    }

    /**
     * @param name The name of the provider to create.
     * This parameter allows (through its [regex
     * pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters
     * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include
     * any of the following characters: _+=,.&#64;-
     */
    override fun name(name: String) {
      cdkBuilder.name(name)
    }

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    override fun privateKeyList(privateKeyList: IResolvable) {
      cdkBuilder.privateKeyList(privateKeyList.let(IResolvable.Companion::unwrap))
    }

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    override fun privateKeyList(privateKeyList: List<Any>) {
      cdkBuilder.privateKeyList(privateKeyList.map{CdkObjectWrappers.unwrap(it)})
    }

    /**
     * @param privateKeyList The private key metadata for the SAML provider.
     */
    override fun privateKeyList(vararg privateKeyList: Any): Unit =
        privateKeyList(privateKeyList.toList())

    /**
     * @param removePrivateKey The Key ID of the private key to remove.
     */
    override fun removePrivateKey(removePrivateKey: String) {
      cdkBuilder.removePrivateKey(removePrivateKey)
    }

    /**
     * @param samlMetadataDocument An XML document generated by an identity provider (IdP) that
     * supports SAML 2.0. The document includes the issuer's name, expiration information, and keys
     * that can be used to validate the SAML authentication response (assertions) that are received
     * from the IdP. You must generate the metadata document using the identity management software
     * that is used as your organization's IdP.
     * For more information, see [About SAML 2.0-based
     * federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in
     * the *IAM User Guide*
     */
    override fun samlMetadataDocument(samlMetadataDocument: String) {
      cdkBuilder.samlMetadataDocument(samlMetadataDocument)
    }

    /**
     * @param tags A list of tags that you want to attach to the new IAM SAML provider.
     * Each tag consists of a key name and an associated value. For more information about tagging,
     * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in
     * the *IAM User Guide* .
     *
     *
     * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then
     * the entire request fails and the resource is not created.
     */
    override fun tags(tags: List<CfnTag>) {
      cdkBuilder.tags(tags.map(CfnTag.Companion::unwrap))
    }

    /**
     * @param tags A list of tags that you want to attach to the new IAM SAML provider.
     * Each tag consists of a key name and an associated value. For more information about tagging,
     * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in
     * the *IAM User Guide* .
     *
     *
     * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then
     * the entire request fails and the resource is not created.
     */
    override fun tags(vararg tags: CfnTag): Unit = tags(tags.toList())

    public fun build(): software.amazon.awscdk.services.iam.CfnSAMLProviderProps =
        cdkBuilder.build()
  }

  private class Wrapper(
    cdkObject: software.amazon.awscdk.services.iam.CfnSAMLProviderProps,
  ) : CdkObject(cdkObject),
      CfnSAMLProviderProps {
    /**
     * Specifies the new private key from your external identity provider.
     *
     * The private key must be a .pem file that uses AES-GCM or AES-CBC encryption algorithm to
     * decrypt SAML assertions.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-addprivatekey)
     */
    override fun addPrivateKey(): String? = unwrap(this).getAddPrivateKey()

    /**
     * Specifies the encryption setting for the SAML provider.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-assertionencryptionmode)
     */
    override fun assertionEncryptionMode(): String? = unwrap(this).getAssertionEncryptionMode()

    /**
     * The name of the provider to create.
     *
     * This parameter allows (through its [regex
     * pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters
     * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include
     * any of the following characters: _+=,.&#64;-
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-name)
     */
    override fun name(): String? = unwrap(this).getName()

    /**
     * The private key metadata for the SAML provider.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-privatekeylist)
     */
    override fun privateKeyList(): Any? = unwrap(this).getPrivateKeyList()

    /**
     * The Key ID of the private key to remove.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-removeprivatekey)
     */
    override fun removePrivateKey(): String? = unwrap(this).getRemovePrivateKey()

    /**
     * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document
     * includes the issuer's name, expiration information, and keys that can be used to validate the
     * SAML authentication response (assertions) that are received from the IdP. You must generate the
     * metadata document using the identity management software that is used as your organization's
     * IdP.
     *
     * For more information, see [About SAML 2.0-based
     * federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in
     * the *IAM User Guide*
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-samlmetadatadocument)
     */
    override fun samlMetadataDocument(): String? = unwrap(this).getSamlMetadataDocument()

    /**
     * A list of tags that you want to attach to the new IAM SAML provider.
     *
     * Each tag consists of a key name and an associated value. For more information about tagging,
     * see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in
     * the *IAM User Guide* .
     *
     *
     * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then
     * the entire request fails and the resource is not created.
     *
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-samlprovider.html#cfn-iam-samlprovider-tags)
     */
    override fun tags(): List<CfnTag> = unwrap(this).getTags()?.map(CfnTag::wrap) ?: emptyList()
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): CfnSAMLProviderProps {
      val builderImpl = BuilderImpl()
      return Wrapper(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.iam.CfnSAMLProviderProps):
        CfnSAMLProviderProps = CdkObjectWrappers.wrap(cdkObject) as? CfnSAMLProviderProps ?:
        Wrapper(cdkObject)

    internal fun unwrap(wrapped: CfnSAMLProviderProps):
        software.amazon.awscdk.services.iam.CfnSAMLProviderProps = (wrapped as CdkObject).cdkObject
        as software.amazon.awscdk.services.iam.CfnSAMLProviderProps
  }
}
