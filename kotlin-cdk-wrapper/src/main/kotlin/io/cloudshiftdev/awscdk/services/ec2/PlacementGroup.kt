@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.ec2

import io.cloudshiftdev.awscdk.Resource
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import kotlin.Number
import kotlin.String
import kotlin.Unit
import io.cloudshiftdev.constructs.Construct as CloudshiftdevConstructsConstruct
import software.constructs.Construct as SoftwareConstructsConstruct

/**
 * Defines a placement group.
 *
 * Placement groups give you fine-grained control over
 * where your instances are provisioned.
 *
 * Example:
 *
 * ```
 * InstanceType instanceType;
 * PlacementGroup pg = PlacementGroup.Builder.create(this, "test-pg")
 * .strategy(PlacementGroupStrategy.SPREAD)
 * .build();
 * Instance.Builder.create(this, "Instance")
 * .vpc(vpc)
 * .instanceType(instanceType)
 * .machineImage(MachineImage.latestAmazonLinux2023())
 * .placementGroup(pg)
 * .build();
 * ```
 */
public open class PlacementGroup(
  cdkObject: software.amazon.awscdk.services.ec2.PlacementGroup,
) : Resource(cdkObject),
    IPlacementGroup {
  public constructor(scope: CloudshiftdevConstructsConstruct, id: String) :
      this(software.amazon.awscdk.services.ec2.PlacementGroup(scope.let(CloudshiftdevConstructsConstruct.Companion::unwrap),
      id)
  )

  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: PlacementGroupProps,
  ) :
      this(software.amazon.awscdk.services.ec2.PlacementGroup(scope.let(CloudshiftdevConstructsConstruct.Companion::unwrap),
      id, props.let(PlacementGroupProps.Companion::unwrap))
  )

  public constructor(
    scope: CloudshiftdevConstructsConstruct,
    id: String,
    props: PlacementGroupProps.Builder.() -> Unit,
  ) : this(scope, id, PlacementGroupProps(props)
  )

  /**
   * The number of partitions.
   *
   * Valid only when Strategy is set to PARTITION.
   */
  public override fun partitions(): Number? = unwrap(this).getPartitions()

  /**
   * The name of this placement group.
   */
  public override fun placementGroupName(): String = unwrap(this).getPlacementGroupName()

  /**
   * Places instances on distinct hardware.
   *
   * Spread placement groups are recommended for applications
   * that have a small number of critical instances that should be kept separate from each other.
   * Launching instances in a spread level placement group reduces the risk of simultaneous failures
   * that might occur when instances share the same equipment.
   * Spread level placement groups provide access to distinct hardware,
   * and are therefore suitable for mixing instance types or launching instances over time.
   * If you start or launch an instance in a spread placement group and there is insufficient
   * unique hardware to fulfill the request, the request fails. Amazon EC2 makes more distinct
   * hardware
   * available over time, so you can try your request again later.
   * Placement groups can spread instances across racks or hosts.
   * You can use host level spread placement groups only with AWS Outposts.
   */
  public override fun spreadLevel(): PlacementGroupSpreadLevel? =
      unwrap(this).getSpreadLevel()?.let(PlacementGroupSpreadLevel::wrap)

  /**
   * Which strategy to use when launching instances.
   */
  public override fun strategy(): PlacementGroupStrategy? =
      unwrap(this).getStrategy()?.let(PlacementGroupStrategy::wrap)

  /**
   * A fluent builder for [io.cloudshiftdev.awscdk.services.ec2.PlacementGroup].
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * The number of partitions.
     *
     * Valid only when Strategy is set to partition.
     *
     * Default: 0
     *
     * @param partitions The number of partitions. 
     */
    public fun partitions(partitions: Number)

    /**
     * the name of this placement group.
     *
     * Default: - generated by CFN
     *
     * @param placementGroupName the name of this placement group. 
     */
    public fun placementGroupName(placementGroupName: String)

    /**
     * Places instances on distinct hardware.
     *
     * Spread placement groups are recommended for applications
     * that have a small number of critical instances that should be kept separate from each other.
     * Launching instances in a spread level placement group reduces the risk of simultaneous
     * failures
     * that might occur when instances share the same equipment.
     * Spread level placement groups provide access to distinct hardware,
     * and are therefore suitable for mixing instance types or launching instances over time.
     * If you start or launch an instance in a spread placement group and there is insufficient
     * unique hardware to fulfill the request, the request fails. Amazon EC2 makes more distinct
     * hardware
     * available over time, so you can try your request again later.
     * Placement groups can spread instances across racks or hosts.
     * You can use host level spread placement groups only with AWS Outposts.
     *
     * Default: - no spread level
     *
     * @param spreadLevel Places instances on distinct hardware. 
     */
    public fun spreadLevel(spreadLevel: PlacementGroupSpreadLevel)

    /**
     * Which strategy to use when launching instances.
     *
     * Default: - `PlacementGroupStrategy.PARTITION` if `partitions` is defined, `CLUSTER` otherwise
     *
     * @param strategy Which strategy to use when launching instances. 
     */
    public fun strategy(strategy: PlacementGroupStrategy)
  }

  private class BuilderImpl(
    scope: SoftwareConstructsConstruct,
    id: String,
  ) : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.ec2.PlacementGroup.Builder =
        software.amazon.awscdk.services.ec2.PlacementGroup.Builder.create(scope, id)

    /**
     * The number of partitions.
     *
     * Valid only when Strategy is set to partition.
     *
     * Default: 0
     *
     * @param partitions The number of partitions. 
     */
    override fun partitions(partitions: Number) {
      cdkBuilder.partitions(partitions)
    }

    /**
     * the name of this placement group.
     *
     * Default: - generated by CFN
     *
     * @param placementGroupName the name of this placement group. 
     */
    override fun placementGroupName(placementGroupName: String) {
      cdkBuilder.placementGroupName(placementGroupName)
    }

    /**
     * Places instances on distinct hardware.
     *
     * Spread placement groups are recommended for applications
     * that have a small number of critical instances that should be kept separate from each other.
     * Launching instances in a spread level placement group reduces the risk of simultaneous
     * failures
     * that might occur when instances share the same equipment.
     * Spread level placement groups provide access to distinct hardware,
     * and are therefore suitable for mixing instance types or launching instances over time.
     * If you start or launch an instance in a spread placement group and there is insufficient
     * unique hardware to fulfill the request, the request fails. Amazon EC2 makes more distinct
     * hardware
     * available over time, so you can try your request again later.
     * Placement groups can spread instances across racks or hosts.
     * You can use host level spread placement groups only with AWS Outposts.
     *
     * Default: - no spread level
     *
     * @param spreadLevel Places instances on distinct hardware. 
     */
    override fun spreadLevel(spreadLevel: PlacementGroupSpreadLevel) {
      cdkBuilder.spreadLevel(spreadLevel.let(PlacementGroupSpreadLevel.Companion::unwrap))
    }

    /**
     * Which strategy to use when launching instances.
     *
     * Default: - `PlacementGroupStrategy.PARTITION` if `partitions` is defined, `CLUSTER` otherwise
     *
     * @param strategy Which strategy to use when launching instances. 
     */
    override fun strategy(strategy: PlacementGroupStrategy) {
      cdkBuilder.strategy(strategy.let(PlacementGroupStrategy.Companion::unwrap))
    }

    public fun build(): software.amazon.awscdk.services.ec2.PlacementGroup = cdkBuilder.build()
  }

  public companion object {
    public val PROPERTY_INJECTION_ID: String =
        software.amazon.awscdk.services.ec2.PlacementGroup.PROPERTY_INJECTION_ID

    public fun fromPlacementGroupName(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      placementGroupName: String,
    ): IPlacementGroup =
        software.amazon.awscdk.services.ec2.PlacementGroup.fromPlacementGroupName(scope.let(CloudshiftdevConstructsConstruct.Companion::unwrap),
        id, placementGroupName).let(IPlacementGroup::wrap)

    public operator fun invoke(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      block: Builder.() -> Unit = {},
    ): PlacementGroup {
      val builderImpl = BuilderImpl(CloudshiftdevConstructsConstruct.unwrap(scope), id)
      return PlacementGroup(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.ec2.PlacementGroup): PlacementGroup
        = PlacementGroup(cdkObject)

    internal fun unwrap(wrapped: PlacementGroup): software.amazon.awscdk.services.ec2.PlacementGroup
        = wrapped.cdkObject as software.amazon.awscdk.services.ec2.PlacementGroup
  }
}
