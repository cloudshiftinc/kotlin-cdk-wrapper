@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.appsync

import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import io.cloudshiftdev.awscdk.common.CdkObjectWrappers
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmName

/**
 * Optional configuration for Http data sources.
 *
 * Example:
 *
 * ```
 * // The code below shows an example of how to instantiate this type.
 * // The values are placeholders you should change.
 * import io.cloudshiftdev.awscdk.services.appsync.*;
 * AppSyncHttpDataSourceOptions appSyncHttpDataSourceOptions =
 * AppSyncHttpDataSourceOptions.builder()
 * .authorizationConfig(AppSyncAwsIamConfig.builder()
 * .signingRegion("signingRegion")
 * .signingServiceName("signingServiceName")
 * .build())
 * .description("description")
 * .name("name")
 * .build();
 * ```
 */
public interface AppSyncHttpDataSourceOptions : AppSyncDataSourceOptions {
  /**
   * The authorization config in case the HTTP endpoint requires authorization.
   *
   * Default: - none
   */
  public fun authorizationConfig(): AppSyncAwsIamConfig? =
      unwrap(this).getAuthorizationConfig()?.let(AppSyncAwsIamConfig::wrap)

  /**
   * A builder for [AppSyncHttpDataSourceOptions]
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * @param authorizationConfig The authorization config in case the HTTP endpoint requires
     * authorization.
     */
    public fun authorizationConfig(authorizationConfig: AppSyncAwsIamConfig)

    /**
     * @param authorizationConfig The authorization config in case the HTTP endpoint requires
     * authorization.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("9160f1c3d380d2577ba95e218019ca36a176dda0044d5fee806c57918853f84a")
    public fun authorizationConfig(authorizationConfig: AppSyncAwsIamConfig.Builder.() -> Unit)

    /**
     * @param description The description of the data source.
     */
    public fun description(description: String)

    /**
     * @param name The name of the data source, overrides the id given by CDK.
     */
    public fun name(name: String)
  }

  private class BuilderImpl : Builder {
    private val cdkBuilder:
        software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions.Builder =
        software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions.builder()

    /**
     * @param authorizationConfig The authorization config in case the HTTP endpoint requires
     * authorization.
     */
    override fun authorizationConfig(authorizationConfig: AppSyncAwsIamConfig) {
      cdkBuilder.authorizationConfig(authorizationConfig.let(AppSyncAwsIamConfig.Companion::unwrap))
    }

    /**
     * @param authorizationConfig The authorization config in case the HTTP endpoint requires
     * authorization.
     */
    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("9160f1c3d380d2577ba95e218019ca36a176dda0044d5fee806c57918853f84a")
    override fun authorizationConfig(authorizationConfig: AppSyncAwsIamConfig.Builder.() -> Unit):
        Unit = authorizationConfig(AppSyncAwsIamConfig(authorizationConfig))

    /**
     * @param description The description of the data source.
     */
    override fun description(description: String) {
      cdkBuilder.description(description)
    }

    /**
     * @param name The name of the data source, overrides the id given by CDK.
     */
    override fun name(name: String) {
      cdkBuilder.name(name)
    }

    public fun build(): software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions =
        cdkBuilder.build()
  }

  private class Wrapper(
    cdkObject: software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions,
  ) : CdkObject(cdkObject),
      AppSyncHttpDataSourceOptions {
    /**
     * The authorization config in case the HTTP endpoint requires authorization.
     *
     * Default: - none
     */
    override fun authorizationConfig(): AppSyncAwsIamConfig? =
        unwrap(this).getAuthorizationConfig()?.let(AppSyncAwsIamConfig::wrap)

    /**
     * The description of the data source.
     *
     * Default: - No description
     */
    override fun description(): String? = unwrap(this).getDescription()

    /**
     * The name of the data source, overrides the id given by CDK.
     *
     * Default: - generated by CDK given the id
     */
    override fun name(): String? = unwrap(this).getName()
  }

  public companion object {
    public operator fun invoke(block: Builder.() -> Unit = {}): AppSyncHttpDataSourceOptions {
      val builderImpl = BuilderImpl()
      return Wrapper(builderImpl.apply(block).build())
    }

    internal
        fun wrap(cdkObject: software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions):
        AppSyncHttpDataSourceOptions = CdkObjectWrappers.wrap(cdkObject) as?
        AppSyncHttpDataSourceOptions ?: Wrapper(cdkObject)

    internal fun unwrap(wrapped: AppSyncHttpDataSourceOptions):
        software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions = (wrapped as
        CdkObject).cdkObject as software.amazon.awscdk.services.appsync.AppSyncHttpDataSourceOptions
  }
}
